
biktim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002d34  08002d34  00003d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d8c  08002d8c  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002d8c  08002d8c  00004060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002d8c  08002d8c  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d8c  08002d8c  00003d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002d94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001190  20000060  08002df4  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f0  08002df4  000041f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d66e  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a8  00000000  00000000  000116f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00013ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a54  00000000  00000000  00014a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015296  00000000  00000000  00015494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ed  00000000  00000000  0002a72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074d1f  00000000  00000000  00038117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ace36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  000ace7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b08a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d1c 	.word	0x08002d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08002d1c 	.word	0x08002d1c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f9f1 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81b 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f85f 	bl	8000250 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b0a      	ldr	r3, [pc, #40]	@ (80001bc <main+0x3c>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fadf 	bl	800176c <osThreadCreate>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a03      	ldr	r2, [pc, #12]	@ (80001c0 <main+0x40>)
 80001b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f001 fad3 	bl	800175e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	bf00      	nop
 80001ba:	e7fd      	b.n	80001b8 <main+0x38>
 80001bc:	08002d40 	.word	0x08002d40
 80001c0:	2000031c 	.word	0x2000031c

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	@ 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	@ 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 fcc2 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e6:	2301      	movs	r3, #1
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f8:	2302      	movs	r3, #2
 80001fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000202:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000208:	f107 0318 	add.w	r3, r7, #24
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fc6b 	bl	8000ae8 <HAL_RCC_OscConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000218:	f000 f87a 	bl	8000310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021c:	230f      	movs	r3, #15
 800021e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000220:	2302      	movs	r3, #2
 8000222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fed8 	bl	8000fec <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000242:	f000 f865 	bl	8000310 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	@ 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <MX_GPIO_Init+0x74>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a16      	ldr	r2, [pc, #88]	@ (80002c4 <MX_GPIO_Init+0x74>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <MX_GPIO_Init+0x74>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <MX_GPIO_Init+0x74>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <MX_GPIO_Init+0x74>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <MX_GPIO_Init+0x74>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	603b      	str	r3, [r7, #0]
 8000292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2110      	movs	r1, #16
 8000298:	480b      	ldr	r0, [pc, #44]	@ (80002c8 <MX_GPIO_Init+0x78>)
 800029a:	f000 fbf5 	bl	8000a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800029e:	2310      	movs	r3, #16
 80002a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <MX_GPIO_Init+0x78>)
 80002b6:	f000 fa6b 	bl	8000790 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800

080002cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80002d4:	2110      	movs	r1, #16
 80002d6:	4804      	ldr	r0, [pc, #16]	@ (80002e8 <StartDefaultTask+0x1c>)
 80002d8:	f000 fbee 	bl	8000ab8 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80002dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e0:	f001 fa90 	bl	8001804 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80002e4:	bf00      	nop
 80002e6:	e7f5      	b.n	80002d4 <StartDefaultTask+0x8>
 80002e8:	40010800 	.word	0x40010800

080002ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a04      	ldr	r2, [pc, #16]	@ (800030c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d101      	bne.n	8000302 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80002fe:	f000 f94b 	bl	8000598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40012c00 	.word	0x40012c00

08000310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000314:	b672      	cpsid	i
}
 8000316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <Error_Handler+0x8>

0800031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000322:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <HAL_MspInit+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a17      	ldr	r2, [pc, #92]	@ (8000384 <HAL_MspInit+0x68>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <HAL_MspInit+0x68>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <HAL_MspInit+0x68>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a11      	ldr	r2, [pc, #68]	@ (8000384 <HAL_MspInit+0x68>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000344:	61d3      	str	r3, [r2, #28]
 8000346:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <HAL_MspInit+0x68>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	210f      	movs	r1, #15
 8000356:	f06f 0001 	mvn.w	r0, #1
 800035a:	f000 f9ee 	bl	800073a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <HAL_MspInit+0x6c>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <HAL_MspInit+0x6c>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000

0800038c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b08c      	sub	sp, #48	@ 0x30
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000394:	2300      	movs	r3, #0
 8000396:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000398:	2300      	movs	r3, #0
 800039a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800039c:	2300      	movs	r3, #0
 800039e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80003a2:	4b2e      	ldr	r3, [pc, #184]	@ (800045c <HAL_InitTick+0xd0>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a2d      	ldr	r2, [pc, #180]	@ (800045c <HAL_InitTick+0xd0>)
 80003a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b2b      	ldr	r3, [pc, #172]	@ (800045c <HAL_InitTick+0xd0>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003ba:	f107 020c 	add.w	r2, r7, #12
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4611      	mov	r1, r2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 ff77 	bl	80012b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80003ca:	f000 ff61 	bl	8001290 <HAL_RCC_GetPCLK2Freq>
 80003ce:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003d2:	4a23      	ldr	r2, [pc, #140]	@ (8000460 <HAL_InitTick+0xd4>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	0c9b      	lsrs	r3, r3, #18
 80003da:	3b01      	subs	r3, #1
 80003dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80003de:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <HAL_InitTick+0xd8>)
 80003e0:	4a21      	ldr	r2, [pc, #132]	@ (8000468 <HAL_InitTick+0xdc>)
 80003e2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80003e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <HAL_InitTick+0xd8>)
 80003e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80003ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000464 <HAL_InitTick+0xd8>)
 80003ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <HAL_InitTick+0xd8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <HAL_InitTick+0xd8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <HAL_InitTick+0xd8>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000404:	4817      	ldr	r0, [pc, #92]	@ (8000464 <HAL_InitTick+0xd8>)
 8000406:	f000 ffa5 	bl	8001354 <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000410:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000414:	2b00      	cmp	r3, #0
 8000416:	d11b      	bne.n	8000450 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000418:	4812      	ldr	r0, [pc, #72]	@ (8000464 <HAL_InitTick+0xd8>)
 800041a:	f000 ffcf 	bl	80013bc <HAL_TIM_Base_Start_IT>
 800041e:	4603      	mov	r3, r0
 8000420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800042c:	2019      	movs	r0, #25
 800042e:	f000 f9a0 	bl	8000772 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	d808      	bhi.n	800044a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000438:	2200      	movs	r2, #0
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	2019      	movs	r0, #25
 800043e:	f000 f97c 	bl	800073a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <HAL_InitTick+0xe0>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6013      	str	r3, [r2, #0]
 8000448:	e002      	b.n	8000450 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000450:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000454:	4618      	mov	r0, r3
 8000456:	3730      	adds	r7, #48	@ 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	431bde83 	.word	0x431bde83
 8000464:	20000320 	.word	0x20000320
 8000468:	40012c00 	.word	0x40012c00
 800046c:	20000004 	.word	0x20000004

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <NMI_Handler+0x4>

08000478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <UsageFault_Handler+0x4>

08000498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <TIM1_UP_IRQHandler+0x10>)
 80004aa:	f000 ffaa 	bl	8001402 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000320 	.word	0x20000320

080004b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004bc:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <SystemInit+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <SystemInit+0x5c>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <SystemInit+0x5c>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	4911      	ldr	r1, [pc, #68]	@ (8000514 <SystemInit+0x5c>)
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <SystemInit+0x60>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <SystemInit+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <SystemInit+0x5c>)
 80004da:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80004de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <SystemInit+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <SystemInit+0x5c>)
 80004ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <SystemInit+0x5c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a07      	ldr	r2, [pc, #28]	@ (8000514 <SystemInit+0x5c>)
 80004f6:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 80004fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <SystemInit+0x5c>)
 80004fe:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 8000502:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <SystemInit+0x64>)
 8000506:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800050a:	609a      	str	r2, [r3, #8]
#endif 
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	f8ff0000 	.word	0xf8ff0000
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000520:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000522:	e003      	b.n	800052c <LoopCopyDataInit>

08000524 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000526:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000528:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800052a:	3104      	adds	r1, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800052c:	480a      	ldr	r0, [pc, #40]	@ (8000558 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000530:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000532:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000534:	d3f6      	bcc.n	8000524 <CopyDataInit>
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000538:	e002      	b.n	8000540 <LoopFillZerobss>

0800053a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800053c:	f842 3b04 	str.w	r3, [r2], #4

08000540 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000542:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000544:	d3f9      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f7ff ffb7 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f002 fb6d 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe17 	bl	8000180 <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r3, =_sidata
 8000554:	08002d94 	.word	0x08002d94
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800055c:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8000560:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8000564:	200011f0 	.word	0x200011f0

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <HAL_Init+0x28>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <HAL_Init+0x28>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f8d1 	bl	8000724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ff02 	bl	800038c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000588:	f7ff fec8 	bl	800031c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <HAL_IncTick+0x1c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <HAL_IncTick+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	4a03      	ldr	r2, [pc, #12]	@ (80005b8 <HAL_IncTick+0x20>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000360 	.word	0x20000360

080005bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b02      	ldr	r3, [pc, #8]	@ (80005cc <HAL_GetTick+0x10>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000360 	.word	0x20000360

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	db0b      	blt.n	800065e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f003 021f 	and.w	r2, r3, #31
 800064c:	4906      	ldr	r1, [pc, #24]	@ (8000668 <__NVIC_EnableIRQ+0x34>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	095b      	lsrs	r3, r3, #5
 8000654:	2001      	movs	r0, #1
 8000656:	fa00 f202 	lsl.w	r2, r0, r2
 800065a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	@ (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	@ 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	@ 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff4f 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800074c:	f7ff ff64 	bl	8000618 <__NVIC_GetPriorityGrouping>
 8000750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	68b9      	ldr	r1, [r7, #8]
 8000756:	6978      	ldr	r0, [r7, #20]
 8000758:	f7ff ffb2 	bl	80006c0 <NVIC_EncodePriority>
 800075c:	4602      	mov	r2, r0
 800075e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff81 	bl	800066c <__NVIC_SetPriority>
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff57 	bl	8000634 <__NVIC_EnableIRQ>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b480      	push	{r7}
 8000792:	b08b      	sub	sp, #44	@ 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a2:	e161      	b.n	8000a68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a4:	2201      	movs	r2, #1
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	429a      	cmp	r2, r3
 80007be:	f040 8150 	bne.w	8000a62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4a97      	ldr	r2, [pc, #604]	@ (8000a24 <HAL_GPIO_Init+0x294>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d05e      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007cc:	4a95      	ldr	r2, [pc, #596]	@ (8000a24 <HAL_GPIO_Init+0x294>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d875      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007d2:	4a95      	ldr	r2, [pc, #596]	@ (8000a28 <HAL_GPIO_Init+0x298>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d058      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007d8:	4a93      	ldr	r2, [pc, #588]	@ (8000a28 <HAL_GPIO_Init+0x298>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d86f      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007de:	4a93      	ldr	r2, [pc, #588]	@ (8000a2c <HAL_GPIO_Init+0x29c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d052      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007e4:	4a91      	ldr	r2, [pc, #580]	@ (8000a2c <HAL_GPIO_Init+0x29c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d869      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007ea:	4a91      	ldr	r2, [pc, #580]	@ (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d04c      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007f0:	4a8f      	ldr	r2, [pc, #572]	@ (8000a30 <HAL_GPIO_Init+0x2a0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d863      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 80007f6:	4a8f      	ldr	r2, [pc, #572]	@ (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d046      	beq.n	800088a <HAL_GPIO_Init+0xfa>
 80007fc:	4a8d      	ldr	r2, [pc, #564]	@ (8000a34 <HAL_GPIO_Init+0x2a4>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d85d      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 8000802:	2b12      	cmp	r3, #18
 8000804:	d82a      	bhi.n	800085c <HAL_GPIO_Init+0xcc>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d859      	bhi.n	80008be <HAL_GPIO_Init+0x12e>
 800080a:	a201      	add	r2, pc, #4	@ (adr r2, 8000810 <HAL_GPIO_Init+0x80>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	0800088b 	.word	0x0800088b
 8000814:	08000865 	.word	0x08000865
 8000818:	08000877 	.word	0x08000877
 800081c:	080008b9 	.word	0x080008b9
 8000820:	080008bf 	.word	0x080008bf
 8000824:	080008bf 	.word	0x080008bf
 8000828:	080008bf 	.word	0x080008bf
 800082c:	080008bf 	.word	0x080008bf
 8000830:	080008bf 	.word	0x080008bf
 8000834:	080008bf 	.word	0x080008bf
 8000838:	080008bf 	.word	0x080008bf
 800083c:	080008bf 	.word	0x080008bf
 8000840:	080008bf 	.word	0x080008bf
 8000844:	080008bf 	.word	0x080008bf
 8000848:	080008bf 	.word	0x080008bf
 800084c:	080008bf 	.word	0x080008bf
 8000850:	080008bf 	.word	0x080008bf
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000881 	.word	0x08000881
 800085c:	4a76      	ldr	r2, [pc, #472]	@ (8000a38 <HAL_GPIO_Init+0x2a8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d013      	beq.n	800088a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000862:	e02c      	b.n	80008be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	623b      	str	r3, [r7, #32]
          break;
 800086a:	e029      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	3304      	adds	r3, #4
 8000872:	623b      	str	r3, [r7, #32]
          break;
 8000874:	e024      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	3308      	adds	r3, #8
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e01f      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	330c      	adds	r3, #12
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e01a      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000892:	2304      	movs	r3, #4
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e013      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d105      	bne.n	80008ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a0:	2308      	movs	r3, #8
 80008a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	611a      	str	r2, [r3, #16]
          break;
 80008aa:	e009      	b.n	80008c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ac:	2308      	movs	r3, #8
 80008ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69fa      	ldr	r2, [r7, #28]
 80008b4:	615a      	str	r2, [r3, #20]
          break;
 80008b6:	e003      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e000      	b.n	80008c0 <HAL_GPIO_Init+0x130>
          break;
 80008be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	2bff      	cmp	r3, #255	@ 0xff
 80008c4:	d801      	bhi.n	80008ca <HAL_GPIO_Init+0x13a>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	e001      	b.n	80008ce <HAL_GPIO_Init+0x13e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3304      	adds	r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2bff      	cmp	r3, #255	@ 0xff
 80008d4:	d802      	bhi.n	80008dc <HAL_GPIO_Init+0x14c>
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	e002      	b.n	80008e2 <HAL_GPIO_Init+0x152>
 80008dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008de:	3b08      	subs	r3, #8
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	210f      	movs	r1, #15
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	6a39      	ldr	r1, [r7, #32]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80a9 	beq.w	8000a62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000910:	4b4a      	ldr	r3, [pc, #296]	@ (8000a3c <HAL_GPIO_Init+0x2ac>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a49      	ldr	r2, [pc, #292]	@ (8000a3c <HAL_GPIO_Init+0x2ac>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b47      	ldr	r3, [pc, #284]	@ (8000a3c <HAL_GPIO_Init+0x2ac>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000928:	4a45      	ldr	r2, [pc, #276]	@ (8000a40 <HAL_GPIO_Init+0x2b0>)
 800092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a44 <HAL_GPIO_Init+0x2b4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1e0>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3c      	ldr	r2, [pc, #240]	@ (8000a48 <HAL_GPIO_Init+0x2b8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1dc>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a4c <HAL_GPIO_Init+0x2bc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1d8>
 8000964:	2302      	movs	r3, #2
 8000966:	e004      	b.n	8000972 <HAL_GPIO_Init+0x1e2>
 8000968:	2303      	movs	r3, #3
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x1e2>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <HAL_GPIO_Init+0x1e2>
 8000970:	2300      	movs	r3, #0
 8000972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000974:	f002 0203 	and.w	r2, r2, #3
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	4093      	lsls	r3, r2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000982:	492f      	ldr	r1, [pc, #188]	@ (8000a40 <HAL_GPIO_Init+0x2b0>)
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800099c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	492b      	ldr	r1, [pc, #172]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
 80009a8:	e006      	b.n	80009b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4927      	ldr	r1, [pc, #156]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009c4:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	4921      	ldr	r1, [pc, #132]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	604b      	str	r3, [r1, #4]
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	43db      	mvns	r3, r3
 80009da:	491d      	ldr	r1, [pc, #116]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009dc:	4013      	ands	r3, r2
 80009de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d006      	beq.n	80009fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	4917      	ldr	r1, [pc, #92]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	608b      	str	r3, [r1, #8]
 80009f8:	e006      	b.n	8000a08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	4913      	ldr	r1, [pc, #76]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000a04:	4013      	ands	r3, r2
 8000a06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d01f      	beq.n	8000a54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <HAL_GPIO_Init+0x2c0>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60cb      	str	r3, [r1, #12]
 8000a20:	e01f      	b.n	8000a62 <HAL_GPIO_Init+0x2d2>
 8000a22:	bf00      	nop
 8000a24:	10320000 	.word	0x10320000
 8000a28:	10310000 	.word	0x10310000
 8000a2c:	10220000 	.word	0x10220000
 8000a30:	10210000 	.word	0x10210000
 8000a34:	10120000 	.word	0x10120000
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_GPIO_Init+0x2f4>)
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4909      	ldr	r1, [pc, #36]	@ (8000a84 <HAL_GPIO_Init+0x2f4>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a64:	3301      	adds	r3, #1
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f47f ae96 	bne.w	80007a4 <HAL_GPIO_Init+0x14>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	372c      	adds	r7, #44	@ 0x2c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40010400 	.word	0x40010400

08000a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a98:	787b      	ldrb	r3, [r7, #1]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aa4:	e003      	b.n	8000aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	041a      	lsls	r2, r3, #16
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ad0:	887a      	ldrh	r2, [r7, #2]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ad8:	887a      	ldrh	r2, [r7, #2]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	611a      	str	r2, [r3, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e272      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8087 	beq.w	8000c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b08:	4b92      	ldr	r3, [pc, #584]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d00c      	beq.n	8000b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b14:	4b8f      	ldr	r3, [pc, #572]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d112      	bne.n	8000b46 <HAL_RCC_OscConfig+0x5e>
 8000b20:	4b8c      	ldr	r3, [pc, #560]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b2c:	d10b      	bne.n	8000b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2e:	4b89      	ldr	r3, [pc, #548]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d06c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x12c>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d168      	bne.n	8000c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e24c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b4e:	d106      	bne.n	8000b5e <HAL_RCC_OscConfig+0x76>
 8000b50:	4b80      	ldr	r3, [pc, #512]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a7f      	ldr	r2, [pc, #508]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e02e      	b.n	8000bbc <HAL_RCC_OscConfig+0xd4>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10c      	bne.n	8000b80 <HAL_RCC_OscConfig+0x98>
 8000b66:	4b7b      	ldr	r3, [pc, #492]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a7a      	ldr	r2, [pc, #488]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b78      	ldr	r3, [pc, #480]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a77      	ldr	r2, [pc, #476]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e01d      	b.n	8000bbc <HAL_RCC_OscConfig+0xd4>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b88:	d10c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0xbc>
 8000b8a:	4b72      	ldr	r3, [pc, #456]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a71      	ldr	r2, [pc, #452]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b6f      	ldr	r3, [pc, #444]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e00b      	b.n	8000bbc <HAL_RCC_OscConfig+0xd4>
 8000ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b68      	ldr	r3, [pc, #416]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a67      	ldr	r2, [pc, #412]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d013      	beq.n	8000bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fcfa 	bl	80005bc <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcf6 	bl	80005bc <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	@ 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e200      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f0      	beq.n	8000bcc <HAL_RCC_OscConfig+0xe4>
 8000bea:	e014      	b.n	8000c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bec:	f7ff fce6 	bl	80005bc <HAL_GetTick>
 8000bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf2:	e008      	b.n	8000c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf4:	f7ff fce2 	bl	80005bc <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b64      	cmp	r3, #100	@ 0x64
 8000c00:	d901      	bls.n	8000c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e1ec      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1f0      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x10c>
 8000c12:	e000      	b.n	8000c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d063      	beq.n	8000cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c22:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c2e:	4b49      	ldr	r3, [pc, #292]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d11c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x18c>
 8000c3a:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d116      	bne.n	8000c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	4b43      	ldr	r3, [pc, #268]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <HAL_RCC_OscConfig+0x176>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d001      	beq.n	8000c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e1c0      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4939      	ldr	r1, [pc, #228]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	e03a      	b.n	8000cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d020      	beq.n	8000cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c7c:	4b36      	ldr	r3, [pc, #216]	@ (8000d58 <HAL_RCC_OscConfig+0x270>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c82:	f7ff fc9b 	bl	80005bc <HAL_GetTick>
 8000c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	e008      	b.n	8000c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c8a:	f7ff fc97 	bl	80005bc <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e1a1      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f0      	beq.n	8000c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	4927      	ldr	r1, [pc, #156]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
 8000cbc:	e015      	b.n	8000cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HAL_RCC_OscConfig+0x270>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fc7a 	bl	80005bc <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fc76 	bl	80005bc <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e180      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d03a      	beq.n	8000d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d019      	beq.n	8000d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_RCC_OscConfig+0x274>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d04:	f7ff fc5a 	bl	80005bc <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fc56 	bl	80005bc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e160      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d54 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f0      	beq.n	8000d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 faf4 	bl	8001318 <RCC_Delay>
 8000d30:	e01c      	b.n	8000d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_RCC_OscConfig+0x274>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d38:	f7ff fc40 	bl	80005bc <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3e:	e00f      	b.n	8000d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d40:	f7ff fc3c 	bl	80005bc <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d908      	bls.n	8000d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e146      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	42420000 	.word	0x42420000
 8000d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d60:	4b92      	ldr	r3, [pc, #584]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1e9      	bne.n	8000d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a6 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7e:	4b8b      	ldr	r3, [pc, #556]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10d      	bne.n	8000da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b88      	ldr	r3, [pc, #544]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a87      	ldr	r2, [pc, #540]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b85      	ldr	r3, [pc, #532]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da2:	2301      	movs	r3, #1
 8000da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	4b82      	ldr	r3, [pc, #520]	@ (8000fb0 <HAL_RCC_OscConfig+0x4c8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d118      	bne.n	8000de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db2:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb0 <HAL_RCC_OscConfig+0x4c8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a7e      	ldr	r2, [pc, #504]	@ (8000fb0 <HAL_RCC_OscConfig+0x4c8>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fbfd 	bl	80005bc <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc6:	f7ff fbf9 	bl	80005bc <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b64      	cmp	r3, #100	@ 0x64
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e103      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd8:	4b75      	ldr	r3, [pc, #468]	@ (8000fb0 <HAL_RCC_OscConfig+0x4c8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d106      	bne.n	8000dfa <HAL_RCC_OscConfig+0x312>
 8000dec:	4b6f      	ldr	r3, [pc, #444]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4a6e      	ldr	r2, [pc, #440]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6213      	str	r3, [r2, #32]
 8000df8:	e02d      	b.n	8000e56 <HAL_RCC_OscConfig+0x36e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x334>
 8000e02:	4b6a      	ldr	r3, [pc, #424]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4a69      	ldr	r2, [pc, #420]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6213      	str	r3, [r2, #32]
 8000e0e:	4b67      	ldr	r3, [pc, #412]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a66      	ldr	r2, [pc, #408]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f023 0304 	bic.w	r3, r3, #4
 8000e18:	6213      	str	r3, [r2, #32]
 8000e1a:	e01c      	b.n	8000e56 <HAL_RCC_OscConfig+0x36e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d10c      	bne.n	8000e3e <HAL_RCC_OscConfig+0x356>
 8000e24:	4b61      	ldr	r3, [pc, #388]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4a60      	ldr	r2, [pc, #384]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6213      	str	r3, [r2, #32]
 8000e30:	4b5e      	ldr	r3, [pc, #376]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a5d      	ldr	r2, [pc, #372]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6213      	str	r3, [r2, #32]
 8000e3c:	e00b      	b.n	8000e56 <HAL_RCC_OscConfig+0x36e>
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4a5a      	ldr	r2, [pc, #360]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	6213      	str	r3, [r2, #32]
 8000e4a:	4b58      	ldr	r3, [pc, #352]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4a57      	ldr	r2, [pc, #348]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f023 0304 	bic.w	r3, r3, #4
 8000e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d015      	beq.n	8000e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fbad 	bl	80005bc <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	e00a      	b.n	8000e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e66:	f7ff fba9 	bl	80005bc <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e0b1      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0ee      	beq.n	8000e66 <HAL_RCC_OscConfig+0x37e>
 8000e88:	e014      	b.n	8000eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fb97 	bl	80005bc <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	e00a      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e92:	f7ff fb93 	bl	80005bc <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e09b      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea8:	4b40      	ldr	r3, [pc, #256]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1ee      	bne.n	8000e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d105      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eba:	4b3c      	ldr	r3, [pc, #240]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8087 	beq.w	8000fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed0:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d061      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d146      	bne.n	8000f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee4:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <HAL_RCC_OscConfig+0x4cc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fb67 	bl	80005bc <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef2:	f7ff fb63 	bl	80005bc <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e06d      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f04:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f0      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d108      	bne.n	8000f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f1a:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	4921      	ldr	r1, [pc, #132]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a19      	ldr	r1, [r3, #32]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	491b      	ldr	r1, [pc, #108]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HAL_RCC_OscConfig+0x4cc>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fb37 	bl	80005bc <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f52:	f7ff fb33 	bl	80005bc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e03d      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f0      	beq.n	8000f52 <HAL_RCC_OscConfig+0x46a>
 8000f70:	e035      	b.n	8000fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_RCC_OscConfig+0x4cc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb20 	bl	80005bc <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f80:	f7ff fb1c 	bl	80005bc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e026      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x498>
 8000f9e:	e01e      	b.n	8000fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d107      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e019      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40007000 	.word	0x40007000
 8000fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_RCC_OscConfig+0x500>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d001      	beq.n	8000fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0d0      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001000:	4b6a      	ldr	r3, [pc, #424]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d910      	bls.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 0207 	bic.w	r2, r3, #7
 8001016:	4965      	ldr	r1, [pc, #404]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	4b63      	ldr	r3, [pc, #396]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d001      	beq.n	8001030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0b8      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001048:	4b59      	ldr	r3, [pc, #356]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a58      	ldr	r2, [pc, #352]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001060:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800106a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106c:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	494d      	ldr	r1, [pc, #308]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d040      	beq.n	800110c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d115      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e07f      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010aa:	4b41      	ldr	r3, [pc, #260]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e073      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b3d      	ldr	r3, [pc, #244]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06b      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f023 0203 	bic.w	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4936      	ldr	r1, [pc, #216]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010dc:	f7ff fa6e 	bl	80005bc <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f7ff fa6a 	bl	80005bc <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e053      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 020c 	and.w	r2, r3, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	429a      	cmp	r2, r3
 800110a:	d1eb      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d210      	bcs.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 0207 	bic.w	r2, r3, #7
 8001122:	4922      	ldr	r1, [pc, #136]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e032      	b.n	80011a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4916      	ldr	r1, [pc, #88]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d009      	beq.n	800117a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	490e      	ldr	r1, [pc, #56]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800117a:	f000 f821 	bl	80011c0 <HAL_RCC_GetSysClockFreq>
 800117e:	4602      	mov	r2, r0
 8001180:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <HAL_RCC_ClockConfig+0x1c8>)
 800118c:	5ccb      	ldrb	r3, [r1, r3]
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_RCC_ClockConfig+0x1d0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8f6 	bl	800038c <HAL_InitTick>

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08002d74 	.word	0x08002d74
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c0:	b490      	push	{r4, r7}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c6:	4b29      	ldr	r3, [pc, #164]	@ (800126c <HAL_RCC_GetSysClockFreq+0xac>)
 80011c8:	1d3c      	adds	r4, r7, #4
 80011ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d0:	f240 2301 	movw	r3, #513	@ 0x201
 80011d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x40>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x46>
 80011fe:	e02b      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001202:	623b      	str	r3, [r7, #32]
      break;
 8001204:	e02b      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3328      	adds	r3, #40	@ 0x28
 8001210:	443b      	add	r3, r7
 8001212:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001216:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d012      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	0c5b      	lsrs	r3, r3, #17
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	3328      	adds	r3, #40	@ 0x28
 800122e:	443b      	add	r3, r7
 8001230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
 8001246:	e004      	b.n	8001252 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	623b      	str	r3, [r7, #32]
      break;
 8001256:	e002      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_RCC_GetSysClockFreq+0xb4>)
 800125a:	623b      	str	r3, [r7, #32]
      break;
 800125c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125e:	6a3b      	ldr	r3, [r7, #32]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3728      	adds	r7, #40	@ 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bc90      	pop	{r4, r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	08002d5c 	.word	0x08002d5c
 8001270:	40021000 	.word	0x40021000
 8001274:	007a1200 	.word	0x007a1200
 8001278:	003d0900 	.word	0x003d0900

0800127c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001280:	4b02      	ldr	r3, [pc, #8]	@ (800128c <HAL_RCC_GetHCLKFreq+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000000 	.word	0x20000000

08001290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001294:	f7ff fff2 	bl	800127c <HAL_RCC_GetHCLKFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	0adb      	lsrs	r3, r3, #11
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	4903      	ldr	r1, [pc, #12]	@ (80012b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	08002d84 	.word	0x08002d84

080012b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	220f      	movs	r2, #15
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_RCC_GetClockConfig+0x58>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_RCC_GetClockConfig+0x58>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_RCC_GetClockConfig+0x58>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_RCC_GetClockConfig+0x58>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	08db      	lsrs	r3, r3, #3
 80012f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_RCC_GetClockConfig+0x5c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0207 	and.w	r2, r3, #7
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40021000 	.word	0x40021000
 8001314:	40022000 	.word	0x40022000

08001318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <RCC_Delay+0x34>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <RCC_Delay+0x38>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0a5b      	lsrs	r3, r3, #9
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001334:	bf00      	nop
  }
  while (Delay --);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1e5a      	subs	r2, r3, #1
 800133a:	60fa      	str	r2, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f9      	bne.n	8001334 <RCC_Delay+0x1c>
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000000 	.word	0x20000000
 8001350:	10624dd3 	.word	0x10624dd3

08001354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e01d      	b.n	80013a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d106      	bne.n	8001380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f815 	bl	80013aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3304      	adds	r3, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f000 f962 	bl	800165c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d007      	beq.n	80013f6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b02      	cmp	r3, #2
 8001416:	d122      	bne.n	800145e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b02      	cmp	r3, #2
 8001424:	d11b      	bne.n	800145e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f06f 0202 	mvn.w	r2, #2
 800142e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8ed 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 800144a:	e005      	b.n	8001458 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f8e0 	bl	8001612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8ef 	bl	8001636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b04      	cmp	r3, #4
 800146a:	d122      	bne.n	80014b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b04      	cmp	r3, #4
 8001478:	d11b      	bne.n	80014b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0204 	mvn.w	r2, #4
 8001482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8c3 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 800149e:	e005      	b.n	80014ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8b6 	bl	8001612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f8c5 	bl	8001636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d122      	bne.n	8001506 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d11b      	bne.n	8001506 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0208 	mvn.w	r2, #8
 80014d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2204      	movs	r2, #4
 80014dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f899 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 80014f2:	e005      	b.n	8001500 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f88c 	bl	8001612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f89b 	bl	8001636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b10      	cmp	r3, #16
 8001512:	d122      	bne.n	800155a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b10      	cmp	r3, #16
 8001520:	d11b      	bne.n	800155a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f06f 0210 	mvn.w	r2, #16
 800152a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2208      	movs	r2, #8
 8001530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f86f 	bl	8001624 <HAL_TIM_IC_CaptureCallback>
 8001546:	e005      	b.n	8001554 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f862 	bl	8001612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f871 	bl	8001636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10e      	bne.n	8001586 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d107      	bne.n	8001586 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f06f 0201 	mvn.w	r2, #1
 800157e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe feb3 	bl	80002ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001590:	2b80      	cmp	r3, #128	@ 0x80
 8001592:	d10e      	bne.n	80015b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	2b80      	cmp	r3, #128	@ 0x80
 80015a0:	d107      	bne.n	80015b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f8b6 	bl	800171e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015bc:	2b40      	cmp	r3, #64	@ 0x40
 80015be:	d10e      	bne.n	80015de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ca:	2b40      	cmp	r3, #64	@ 0x40
 80015cc:	d107      	bne.n	80015de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80015d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f835 	bl	8001648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d10e      	bne.n	800160a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d107      	bne.n	800160a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0220 	mvn.w	r2, #32
 8001602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f881 	bl	800170c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
	...

0800165c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <TIM_Base_SetConfig+0xa8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d007      	beq.n	8001684 <TIM_Base_SetConfig+0x28>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800167a:	d003      	beq.n	8001684 <TIM_Base_SetConfig+0x28>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <TIM_Base_SetConfig+0xac>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d108      	bne.n	8001696 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800168a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1a      	ldr	r2, [pc, #104]	@ (8001704 <TIM_Base_SetConfig+0xa8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <TIM_Base_SetConfig+0x52>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a4:	d003      	beq.n	80016ae <TIM_Base_SetConfig+0x52>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <TIM_Base_SetConfig+0xac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d108      	bne.n	80016c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <TIM_Base_SetConfig+0xa8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d103      	bne.n	80016f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	615a      	str	r2, [r3, #20]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40012c00 	.word	0x40012c00
 8001708:	40000400 	.word	0x40000400

0800170c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	2b84      	cmp	r3, #132	@ 0x84
 8001744:	d005      	beq.n	8001752 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	3303      	adds	r3, #3
 8001750:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001762:	f000 faef 	bl	8001d44 <vTaskStartScheduler>
  
  return osOK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}

0800176c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af04      	add	r7, sp, #16
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d020      	beq.n	80017c0 <osThreadCreate+0x54>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01c      	beq.n	80017c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685c      	ldr	r4, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691e      	ldr	r6, [r3, #16]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ffc9 	bl	8001730 <makeFreeRtosPriority>
 800179e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	9100      	str	r1, [sp, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	4632      	mov	r2, r6
 80017b2:	4629      	mov	r1, r5
 80017b4:	4620      	mov	r0, r4
 80017b6:	f000 f8e8 	bl	800198a <xTaskCreateStatic>
 80017ba:	4603      	mov	r3, r0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e01c      	b.n	80017fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685c      	ldr	r4, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017cc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffab 	bl	8001730 <makeFreeRtosPriority>
 80017da:	4602      	mov	r2, r0
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	9200      	str	r2, [sp, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4632      	mov	r2, r6
 80017e8:	4629      	mov	r1, r5
 80017ea:	4620      	mov	r0, r4
 80017ec:	f000 f92c 	bl	8001a48 <xTaskCreate>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80017fa:	68fb      	ldr	r3, [r7, #12]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001804 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <osDelay+0x16>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	e000      	b.n	800181c <osDelay+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fa5b 	bl	8001cd8 <vTaskDelay>
  
  return osOK;
 8001822:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f103 0208 	add.w	r2, r3, #8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f103 0208 	add.w	r2, r3, #8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 0208 	add.w	r2, r3, #8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018de:	d103      	bne.n	80018e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e00c      	b.n	8001902 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3308      	adds	r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e002      	b.n	80018f6 <vListInsert+0x2e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d2f6      	bcs.n	80018f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6892      	ldr	r2, [r2, #8]
 800194e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6852      	ldr	r2, [r2, #4]
 8001958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d103      	bne.n	800196c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800198a:	b580      	push	{r7, lr}
 800198c:	b08e      	sub	sp, #56	@ 0x38
 800198e:	af04      	add	r7, sp, #16
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10b      	bne.n	80019b6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800199e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	e7fd      	b.n	80019b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80019b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10b      	bne.n	80019d4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80019bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019c0:	f383 8811 	msr	BASEPRI, r3
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	61fb      	str	r3, [r7, #28]
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80019d4:	23a0      	movs	r3, #160	@ 0xa0
 80019d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2ba0      	cmp	r3, #160	@ 0xa0
 80019dc:	d00b      	beq.n	80019f6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80019de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	61bb      	str	r3, [r7, #24]
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80019f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01e      	beq.n	8001a3a <xTaskCreateStatic+0xb0>
 80019fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01b      	beq.n	8001a3a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a14:	2300      	movs	r3, #0
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f851 	bl	8001ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a34:	f000 f8e6 	bl	8001c04 <prvAddNewTaskToReadyList>
 8001a38:	e001      	b.n	8001a3e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a3e:	697b      	ldr	r3, [r7, #20]
	}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	@ 0x30
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fe9f 	bl	80027a0 <pvPortMalloc>
 8001a62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a6a:	20a0      	movs	r0, #160	@ 0xa0
 8001a6c:	f000 fe98 	bl	80027a0 <pvPortMalloc>
 8001a70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a7e:	e005      	b.n	8001a8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f000 ff55 	bl	8002930 <vPortFree>
 8001a86:	e001      	b.n	8001a8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f80f 	bl	8001ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ab6:	69f8      	ldr	r0, [r7, #28]
 8001ab8:	f000 f8a4 	bl	8001c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
 8001ac0:	e002      	b.n	8001ac8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ac8:	69bb      	ldr	r3, [r7, #24]
	}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001aec:	3b01      	subs	r3, #1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	617b      	str	r3, [r7, #20]
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	e7fd      	b.n	8001b1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e012      	b.n	8001b4a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	7819      	ldrb	r1, [r3, #0]
 8001b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	3334      	adds	r3, #52	@ 0x34
 8001b34:	460a      	mov	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d9e9      	bls.n	8001b24 <prvInitialiseNewTask+0x50>
 8001b50:	e000      	b.n	8001b54 <prvInitialiseNewTask+0x80>
		{
			break;
 8001b52:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d901      	bls.n	8001b66 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b62:	2306      	movs	r3, #6
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b74:	2200      	movs	r2, #0
 8001b76:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe74 	bl	800186a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b84:	3318      	adds	r3, #24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fe6f 	bl	800186a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b94:	f1c3 0207 	rsb	r2, r3, #7
 8001b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb4:	334c      	adds	r3, #76	@ 0x4c
 8001bb6:	224c      	movs	r2, #76	@ 0x4c
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 ffce 	bl	8002b5c <memset>
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <prvInitialiseNewTask+0x124>)
 8001bc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <prvInitialiseNewTask+0x128>)
 8001bca:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bce:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <prvInitialiseNewTask+0x12c>)
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	69b8      	ldr	r0, [r7, #24]
 8001bd8:	f000 fc30 	bl	800243c <pxPortInitialiseStack>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200010b0 	.word	0x200010b0
 8001bfc:	20001118 	.word	0x20001118
 8001c00:	20001180 	.word	0x20001180

08001c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c0c:	f000 fd06 	bl	800261c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c22:	4a27      	ldr	r2, [pc, #156]	@ (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c28:	4b24      	ldr	r3, [pc, #144]	@ (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d110      	bne.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c30:	f000 fad6 	bl	80021e0 <prvInitialiseTaskLists>
 8001c34:	e00d      	b.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c36:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <prvAddNewTaskToReadyList+0xc0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d802      	bhi.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <prvAddNewTaskToReadyList+0xc4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <prvAddNewTaskToReadyList+0xc4>)
 8001c5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <prvAddNewTaskToReadyList+0xc8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <prvAddNewTaskToReadyList+0xc8>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <prvAddNewTaskToReadyList+0xcc>)
 8001c7c:	441a      	add	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f7ff fdfc 	bl	8001882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c8a:	f000 fcf7 	bl	800267c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <prvAddNewTaskToReadyList+0xc0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00e      	beq.n	8001cb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <prvAddNewTaskToReadyList+0xd0>)
 8001ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000464 	.word	0x20000464
 8001cc0:	20000364 	.word	0x20000364
 8001cc4:	20000470 	.word	0x20000470
 8001cc8:	20000480 	.word	0x20000480
 8001ccc:	2000046c 	.word	0x2000046c
 8001cd0:	20000368 	.word	0x20000368
 8001cd4:	e000ed04 	.word	0xe000ed04

08001cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d018      	beq.n	8001d1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <vTaskDelay+0x64>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <vTaskDelay+0x32>
	__asm volatile
 8001cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	60bb      	str	r3, [r7, #8]
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001d0a:	f000 f885 	bl	8001e18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fb2d 	bl	8002370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d16:	f000 f88d 	bl	8001e34 <xTaskResumeAll>
 8001d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <vTaskDelay+0x68>)
 8001d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000048c 	.word	0x2000048c
 8001d40:	e000ed04 	.word	0xe000ed04

08001d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d52:	463a      	mov	r2, r7
 8001d54:	1d39      	adds	r1, r7, #4
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe f9f8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	9202      	str	r2, [sp, #8]
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	460a      	mov	r2, r1
 8001d72:	4921      	ldr	r1, [pc, #132]	@ (8001df8 <vTaskStartScheduler+0xb4>)
 8001d74:	4821      	ldr	r0, [pc, #132]	@ (8001dfc <vTaskStartScheduler+0xb8>)
 8001d76:	f7ff fe08 	bl	800198a <xTaskCreateStatic>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <vTaskStartScheduler+0xbc>)
 8001d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001d80:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <vTaskStartScheduler+0xbc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e001      	b.n	8001d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11b      	bne.n	8001dd0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8001d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d9c:	f383 8811 	msr	BASEPRI, r3
 8001da0:	f3bf 8f6f 	isb	sy
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	613b      	str	r3, [r7, #16]
}
 8001daa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <vTaskStartScheduler+0xc0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	334c      	adds	r3, #76	@ 0x4c
 8001db2:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <vTaskStartScheduler+0xc4>)
 8001db4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <vTaskStartScheduler+0xc8>)
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <vTaskStartScheduler+0xcc>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <vTaskStartScheduler+0xd0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dca:	f000 fbb5 	bl	8002538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001dce:	e00f      	b.n	8001df0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d10b      	bne.n	8001df0 <vTaskStartScheduler+0xac>
	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	60fb      	str	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <vTaskStartScheduler+0xa8>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	08002d6c 	.word	0x08002d6c
 8001dfc:	080021b1 	.word	0x080021b1
 8001e00:	20000488 	.word	0x20000488
 8001e04:	20000364 	.word	0x20000364
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	20000484 	.word	0x20000484
 8001e10:	20000470 	.word	0x20000470
 8001e14:	20000468 	.word	0x20000468

08001e18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <vTaskSuspendAll+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a03      	ldr	r2, [pc, #12]	@ (8001e30 <vTaskSuspendAll+0x18>)
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000048c 	.word	0x2000048c

08001e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e42:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <xTaskResumeAll+0x118>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10b      	bne.n	8001e62 <xTaskResumeAll+0x2e>
	__asm volatile
 8001e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	603b      	str	r3, [r7, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e62:	f000 fbdb 	bl	800261c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <xTaskResumeAll+0x118>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	4a37      	ldr	r2, [pc, #220]	@ (8001f4c <xTaskResumeAll+0x118>)
 8001e6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <xTaskResumeAll+0x118>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d161      	bne.n	8001f3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e78:	4b35      	ldr	r3, [pc, #212]	@ (8001f50 <xTaskResumeAll+0x11c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05d      	beq.n	8001f3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e80:	e02e      	b.n	8001ee0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <xTaskResumeAll+0x120>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fd52 	bl	8001938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fd4d 	bl	8001938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <xTaskResumeAll+0x124>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <xTaskResumeAll+0x124>)
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <xTaskResumeAll+0x128>)
 8001ebe:	441a      	add	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7ff fcdb 	bl	8001882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <xTaskResumeAll+0x12c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d302      	bcc.n	8001ee0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001eda:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <xTaskResumeAll+0x130>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <xTaskResumeAll+0x120>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1cc      	bne.n	8001e82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001eee:	f000 fa1b 	bl	8002328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <xTaskResumeAll+0x134>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d010      	beq.n	8001f20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001efe:	f000 f837 	bl	8001f70 <xTaskIncrementTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <xTaskResumeAll+0x130>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f1      	bne.n	8001efe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <xTaskResumeAll+0x134>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f20:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <xTaskResumeAll+0x130>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <xTaskResumeAll+0x138>)
 8001f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f3c:	f000 fb9e 	bl	800267c <vPortExitCritical>

	return xAlreadyYielded;
 8001f40:	68bb      	ldr	r3, [r7, #8]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000048c 	.word	0x2000048c
 8001f50:	20000464 	.word	0x20000464
 8001f54:	20000424 	.word	0x20000424
 8001f58:	2000046c 	.word	0x2000046c
 8001f5c:	20000368 	.word	0x20000368
 8001f60:	20000364 	.word	0x20000364
 8001f64:	20000478 	.word	0x20000478
 8001f68:	20000474 	.word	0x20000474
 8001f6c:	e000ed04 	.word	0xe000ed04

08001f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <xTaskIncrementTick+0x150>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 808e 	bne.w	80020a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f84:	4b4f      	ldr	r3, [pc, #316]	@ (80020c4 <xTaskIncrementTick+0x154>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80020c4 <xTaskIncrementTick+0x154>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d121      	bne.n	8001fdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <xTaskIncrementTick+0x158>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <xTaskIncrementTick+0x4a>
	__asm volatile
 8001fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	603b      	str	r3, [r7, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	e7fd      	b.n	8001fb6 <xTaskIncrementTick+0x46>
 8001fba:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <xTaskIncrementTick+0x158>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	4b42      	ldr	r3, [pc, #264]	@ (80020cc <xTaskIncrementTick+0x15c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a40      	ldr	r2, [pc, #256]	@ (80020c8 <xTaskIncrementTick+0x158>)
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4a40      	ldr	r2, [pc, #256]	@ (80020cc <xTaskIncrementTick+0x15c>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b40      	ldr	r3, [pc, #256]	@ (80020d0 <xTaskIncrementTick+0x160>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80020d0 <xTaskIncrementTick+0x160>)
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	f000 f9a6 	bl	8002328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <xTaskIncrementTick+0x164>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d34d      	bcc.n	8002082 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <xTaskIncrementTick+0x158>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <xTaskIncrementTick+0x84>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <xTaskIncrementTick+0x86>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffa:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <xTaskIncrementTick+0x164>)
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	601a      	str	r2, [r3, #0]
					break;
 8002002:	e03e      	b.n	8002082 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002004:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <xTaskIncrementTick+0x158>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d203      	bcs.n	8002024 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800201c:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <xTaskIncrementTick+0x164>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
						break;
 8002022:	e02e      	b.n	8002082 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3304      	adds	r3, #4
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fc85 	bl	8001938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3318      	adds	r3, #24
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc7c 	bl	8001938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	2201      	movs	r2, #1
 8002046:	409a      	lsls	r2, r3
 8002048:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <xTaskIncrementTick+0x168>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	4a22      	ldr	r2, [pc, #136]	@ (80020d8 <xTaskIncrementTick+0x168>)
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <xTaskIncrementTick+0x16c>)
 8002060:	441a      	add	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3304      	adds	r3, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4610      	mov	r0, r2
 800206a:	f7ff fc0a 	bl	8001882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <xTaskIncrementTick+0x170>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d3b4      	bcc.n	8001fe6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800207c:	2301      	movs	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002080:	e7b1      	b.n	8001fe6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002082:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <xTaskIncrementTick+0x170>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002088:	4914      	ldr	r1, [pc, #80]	@ (80020dc <xTaskIncrementTick+0x16c>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d907      	bls.n	80020aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800209a:	2301      	movs	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e004      	b.n	80020aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020a0:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <xTaskIncrementTick+0x174>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <xTaskIncrementTick+0x174>)
 80020a8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <xTaskIncrementTick+0x178>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80020b6:	697b      	ldr	r3, [r7, #20]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000048c 	.word	0x2000048c
 80020c4:	20000468 	.word	0x20000468
 80020c8:	2000041c 	.word	0x2000041c
 80020cc:	20000420 	.word	0x20000420
 80020d0:	2000047c 	.word	0x2000047c
 80020d4:	20000484 	.word	0x20000484
 80020d8:	2000046c 	.word	0x2000046c
 80020dc:	20000368 	.word	0x20000368
 80020e0:	20000364 	.word	0x20000364
 80020e4:	20000474 	.word	0x20000474
 80020e8:	20000478 	.word	0x20000478

080020ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <vTaskSwitchContext+0xac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020fa:	4b28      	ldr	r3, [pc, #160]	@ (800219c <vTaskSwitchContext+0xb0>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002100:	e045      	b.n	800218e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002102:	4b26      	ldr	r3, [pc, #152]	@ (800219c <vTaskSwitchContext+0xb0>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002108:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <vTaskSwitchContext+0xb4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f1c3 031f 	rsb	r3, r3, #31
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	4921      	ldr	r1, [pc, #132]	@ (80021a4 <vTaskSwitchContext+0xb8>)
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <vTaskSwitchContext+0x5e>
	__asm volatile
 8002132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	607b      	str	r3, [r7, #4]
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <vTaskSwitchContext+0x5a>
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <vTaskSwitchContext+0xb8>)
 8002156:	4413      	add	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3308      	adds	r3, #8
 800216c:	429a      	cmp	r2, r3
 800216e:	d104      	bne.n	800217a <vTaskSwitchContext+0x8e>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <vTaskSwitchContext+0xbc>)
 8002182:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <vTaskSwitchContext+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	334c      	adds	r3, #76	@ 0x4c
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <vTaskSwitchContext+0xc0>)
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	2000048c 	.word	0x2000048c
 800219c:	20000478 	.word	0x20000478
 80021a0:	2000046c 	.word	0x2000046c
 80021a4:	20000368 	.word	0x20000368
 80021a8:	20000364 	.word	0x20000364
 80021ac:	20000010 	.word	0x20000010

080021b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021b8:	f000 f852 	bl	8002260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <prvIdleTask+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d9f9      	bls.n	80021b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <prvIdleTask+0x2c>)
 80021c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80021d4:	e7f0      	b.n	80021b8 <prvIdleTask+0x8>
 80021d6:	bf00      	nop
 80021d8:	20000368 	.word	0x20000368
 80021dc:	e000ed04 	.word	0xe000ed04

080021e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	e00c      	b.n	8002206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <prvInitialiseTaskLists+0x60>)
 80021f8:	4413      	add	r3, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fb16 	bl	800182c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d9ef      	bls.n	80021ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800220c:	480d      	ldr	r0, [pc, #52]	@ (8002244 <prvInitialiseTaskLists+0x64>)
 800220e:	f7ff fb0d 	bl	800182c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <prvInitialiseTaskLists+0x68>)
 8002214:	f7ff fb0a 	bl	800182c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <prvInitialiseTaskLists+0x6c>)
 800221a:	f7ff fb07 	bl	800182c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800221e:	480c      	ldr	r0, [pc, #48]	@ (8002250 <prvInitialiseTaskLists+0x70>)
 8002220:	f7ff fb04 	bl	800182c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002224:	480b      	ldr	r0, [pc, #44]	@ (8002254 <prvInitialiseTaskLists+0x74>)
 8002226:	f7ff fb01 	bl	800182c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <prvInitialiseTaskLists+0x78>)
 800222c:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <prvInitialiseTaskLists+0x64>)
 800222e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <prvInitialiseTaskLists+0x7c>)
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <prvInitialiseTaskLists+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000368 	.word	0x20000368
 8002244:	200003f4 	.word	0x200003f4
 8002248:	20000408 	.word	0x20000408
 800224c:	20000424 	.word	0x20000424
 8002250:	20000438 	.word	0x20000438
 8002254:	20000450 	.word	0x20000450
 8002258:	2000041c 	.word	0x2000041c
 800225c:	20000420 	.word	0x20000420

08002260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002266:	e019      	b.n	800229c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002268:	f000 f9d8 	bl	800261c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <prvCheckTasksWaitingTermination+0x50>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb5d 	bl	8001938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <prvCheckTasksWaitingTermination+0x54>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <prvCheckTasksWaitingTermination+0x54>)
 8002286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 8002290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002292:	f000 f9f3 	bl	800267c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f810 	bl	80022bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e1      	bne.n	8002268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000438 	.word	0x20000438
 80022b4:	20000464 	.word	0x20000464
 80022b8:	2000044c 	.word	0x2000044c

080022bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	334c      	adds	r3, #76	@ 0x4c
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fc4f 	bl	8002b6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fb27 	bl	8002930 <vPortFree>
				vPortFree( pxTCB );
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fb24 	bl	8002930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022e8:	e019      	b.n	800231e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d103      	bne.n	80022fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb1b 	bl	8002930 <vPortFree>
	}
 80022fa:	e010      	b.n	800231e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8002302:	2b02      	cmp	r3, #2
 8002304:	d00b      	beq.n	800231e <prvDeleteTCB+0x62>
	__asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	60fb      	str	r3, [r7, #12]
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	e7fd      	b.n	800231a <prvDeleteTCB+0x5e>
	}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <prvResetNextTaskUnblockTime+0x40>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <prvResetNextTaskUnblockTime+0x14>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <prvResetNextTaskUnblockTime+0x16>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <prvResetNextTaskUnblockTime+0x44>)
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800234a:	e008      	b.n	800235e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <prvResetNextTaskUnblockTime+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a04      	ldr	r2, [pc, #16]	@ (800236c <prvResetNextTaskUnblockTime+0x44>)
 800235c:	6013      	str	r3, [r2, #0]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	2000041c 	.word	0x2000041c
 800236c:	20000484 	.word	0x20000484

08002370 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800237a:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xb0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002380:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3304      	adds	r3, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fad6 	bl	8001938 <uxListRemove>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002392:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	2201      	movs	r2, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	4a20      	ldr	r2, [pc, #128]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d10a      	bne.n	80023c8 <prvAddCurrentTaskToDelayedList+0x58>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3304      	adds	r3, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	481a      	ldr	r0, [pc, #104]	@ (800242c <prvAddCurrentTaskToDelayedList+0xbc>)
 80023c2:	f7ff fa5e 	bl	8001882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023c6:	e026      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d209      	bcs.n	80023f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <prvAddCurrentTaskToDelayedList+0xc0>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7ff fa6b 	bl	80018c8 <vListInsert>
}
 80023f2:	e010      	b.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <prvAddCurrentTaskToDelayedList+0xc4>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff fa61 	bl	80018c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	429a      	cmp	r2, r3
 800240e:	d202      	bcs.n	8002416 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002410:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000468 	.word	0x20000468
 8002424:	20000364 	.word	0x20000364
 8002428:	2000046c 	.word	0x2000046c
 800242c:	20000450 	.word	0x20000450
 8002430:	20000420 	.word	0x20000420
 8002434:	2000041c 	.word	0x2000041c
 8002438:	20000484 	.word	0x20000484

0800243c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3b04      	subs	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b04      	subs	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b04      	subs	r3, #4
 800246a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800246c:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <pxPortInitialiseStack+0x54>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b14      	subs	r3, #20
 8002476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b20      	subs	r3, #32
 8002482:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002484:	68fb      	ldr	r3, [r7, #12]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	08002495 	.word	0x08002495

08002494 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <prvTaskExitError+0x54>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d00b      	beq.n	80024c0 <prvTaskExitError+0x2c>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	60fb      	str	r3, [r7, #12]
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <prvTaskExitError+0x28>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	60bb      	str	r3, [r7, #8]
}
 80024d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024d4:	bf00      	nop
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0fc      	beq.n	80024d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	00000000 	.word	0x00000000

080024f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	@ (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	f04e 0e0d 	orr.w	lr, lr, #13
 800250e:	4770      	bx	lr

08002510 <pxCurrentTCBConst2>:
 8002510:	20000364 	.word	0x20000364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop

08002518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002518:	4806      	ldr	r0, [pc, #24]	@ (8002534 <prvPortStartFirstTask+0x1c>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f380 8808 	msr	MSP, r0
 8002522:	b662      	cpsie	i
 8002524:	b661      	cpsie	f
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	df00      	svc	0
 8002530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002532:	bf00      	nop
 8002534:	e000ed08 	.word	0xe000ed08

08002538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800253e:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <xPortStartScheduler+0xd0>)
 8002540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	22ff      	movs	r2, #255	@ 0xff
 800254e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <xPortStartScheduler+0xd4>)
 8002564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002566:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <xPortStartScheduler+0xd8>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800256c:	e009      	b.n	8002582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <xPortStartScheduler+0xd8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	4a26      	ldr	r2, [pc, #152]	@ (8002610 <xPortStartScheduler+0xd8>)
 8002576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b80      	cmp	r3, #128	@ 0x80
 800258c:	d0ef      	beq.n	800256e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800258e:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <xPortStartScheduler+0xd8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00b      	beq.n	80025b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	60bb      	str	r3, [r7, #8]
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025b2:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <xPortStartScheduler+0xd8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4a15      	ldr	r2, [pc, #84]	@ (8002610 <xPortStartScheduler+0xd8>)
 80025ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <xPortStartScheduler+0xd8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <xPortStartScheduler+0xd8>)
 80025c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025d0:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <xPortStartScheduler+0xdc>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002614 <xPortStartScheduler+0xdc>)
 80025d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <xPortStartScheduler+0xdc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <xPortStartScheduler+0xdc>)
 80025e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80025e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80025e8:	f000 f8b8 	bl	800275c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <xPortStartScheduler+0xe0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80025f2:	f7ff ff91 	bl	8002518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80025f6:	f7ff fd79 	bl	80020ec <vTaskSwitchContext>
	prvTaskExitError();
 80025fa:	f7ff ff4b 	bl	8002494 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	e000e400 	.word	0xe000e400
 800260c:	20000490 	.word	0x20000490
 8002610:	20000494 	.word	0x20000494
 8002614:	e000ed20 	.word	0xe000ed20
 8002618:	2000000c 	.word	0x2000000c

0800261c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	__asm volatile
 8002622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	607b      	str	r3, [r7, #4]
}
 8002634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002636:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <vPortEnterCritical+0x58>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <vPortEnterCritical+0x58>)
 800263e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <vPortEnterCritical+0x58>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d110      	bne.n	800266a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <vPortEnterCritical+0x5c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <vPortEnterCritical+0x4e>
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	603b      	str	r3, [r7, #0]
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <vPortEnterCritical+0x4a>
	}
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	2000000c 	.word	0x2000000c
 8002678:	e000ed04 	.word	0xe000ed04

0800267c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002682:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <vPortExitCritical+0x50>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <vPortExitCritical+0x26>
	__asm volatile
 800268a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	607b      	str	r3, [r7, #4]
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <vPortExitCritical+0x50>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <vPortExitCritical+0x50>)
 80026aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026ac:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <vPortExitCritical+0x50>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <vPortExitCritical+0x44>
 80026b4:	2300      	movs	r3, #0
 80026b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80026d0:	f3ef 8009 	mrs	r0, PSP
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <pxCurrentTCBConst>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026e0:	6010      	str	r0, [r2, #0]
 80026e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80026e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80026ea:	f380 8811 	msr	BASEPRI, r0
 80026ee:	f7ff fcfd 	bl	80020ec <vTaskSwitchContext>
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f380 8811 	msr	BASEPRI, r0
 80026fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	6808      	ldr	r0, [r1, #0]
 8002702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002706:	f380 8809 	msr	PSP, r0
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	4770      	bx	lr

08002710 <pxCurrentTCBConst>:
 8002710:	20000364 	.word	0x20000364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop

08002718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	607b      	str	r3, [r7, #4]
}
 8002730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002732:	f7ff fc1d 	bl	8001f70 <xTaskIncrementTick>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <SysTick_Handler+0x40>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f383 8811 	msr	BASEPRI, r3
}
 800274e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002760:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <vPortSetupTimerInterrupt+0x30>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <vPortSetupTimerInterrupt+0x34>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <vPortSetupTimerInterrupt+0x38>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <vPortSetupTimerInterrupt+0x3c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	099b      	lsrs	r3, r3, #6
 8002778:	4a08      	ldr	r2, [pc, #32]	@ (800279c <vPortSetupTimerInterrupt+0x40>)
 800277a:	3b01      	subs	r3, #1
 800277c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800277e:	4b03      	ldr	r3, [pc, #12]	@ (800278c <vPortSetupTimerInterrupt+0x30>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	e000e010 	.word	0xe000e010
 8002790:	e000e018 	.word	0xe000e018
 8002794:	20000000 	.word	0x20000000
 8002798:	10624dd3 	.word	0x10624dd3
 800279c:	e000e014 	.word	0xe000e014

080027a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80027ac:	f7ff fb34 	bl	8001e18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027b0:	4b5a      	ldr	r3, [pc, #360]	@ (800291c <pvPortMalloc+0x17c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027b8:	f000 f916 	bl	80029e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027bc:	4b58      	ldr	r3, [pc, #352]	@ (8002920 <pvPortMalloc+0x180>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 8090 	bne.w	80028ea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01e      	beq.n	800280e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80027d0:	2208      	movs	r2, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f023 0307 	bic.w	r3, r3, #7
 80027e8:	3308      	adds	r3, #8
 80027ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <pvPortMalloc+0x6e>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	617b      	str	r3, [r7, #20]
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d06a      	beq.n	80028ea <pvPortMalloc+0x14a>
 8002814:	4b43      	ldr	r3, [pc, #268]	@ (8002924 <pvPortMalloc+0x184>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d865      	bhi.n	80028ea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800281e:	4b42      	ldr	r3, [pc, #264]	@ (8002928 <pvPortMalloc+0x188>)
 8002820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002822:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <pvPortMalloc+0x188>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002828:	e004      	b.n	8002834 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d903      	bls.n	8002846 <pvPortMalloc+0xa6>
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f1      	bne.n	800282a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002846:	4b35      	ldr	r3, [pc, #212]	@ (800291c <pvPortMalloc+0x17c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284c:	429a      	cmp	r2, r3
 800284e:	d04c      	beq.n	80028ea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2208      	movs	r2, #8
 8002856:	4413      	add	r3, r2
 8002858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad2      	subs	r2, r2, r3
 800286a:	2308      	movs	r3, #8
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	429a      	cmp	r2, r3
 8002870:	d920      	bls.n	80028b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4413      	add	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <pvPortMalloc+0xfc>
	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	613b      	str	r3, [r7, #16]
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028ae:	69b8      	ldr	r0, [r7, #24]
 80028b0:	f000 f8fc 	bl	8002aac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <pvPortMalloc+0x184>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <pvPortMalloc+0x184>)
 80028c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <pvPortMalloc+0x184>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b19      	ldr	r3, [pc, #100]	@ (800292c <pvPortMalloc+0x18c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d203      	bcs.n	80028d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <pvPortMalloc+0x184>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	@ (800292c <pvPortMalloc+0x18c>)
 80028d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <pvPortMalloc+0x180>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	431a      	orrs	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80028ea:	f7ff faa3 	bl	8001e34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <pvPortMalloc+0x170>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	60fb      	str	r3, [r7, #12]
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <pvPortMalloc+0x16c>
	return pvReturn;
 8002910:	69fb      	ldr	r3, [r7, #28]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3728      	adds	r7, #40	@ 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200010a0 	.word	0x200010a0
 8002920:	200010ac 	.word	0x200010ac
 8002924:	200010a4 	.word	0x200010a4
 8002928:	20001098 	.word	0x20001098
 800292c:	200010a8 	.word	0x200010a8

08002930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04a      	beq.n	80029d8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002942:	2308      	movs	r3, #8
 8002944:	425b      	negs	r3, r3
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <vPortFree+0xb0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <vPortFree+0x46>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	60fb      	str	r3, [r7, #12]
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <vPortFree+0x66>
	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	60bb      	str	r3, [r7, #8]
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	e7fd      	b.n	8002992 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <vPortFree+0xb0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d115      	bne.n	80029d8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <vPortFree+0xb0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80029bc:	f7ff fa2c 	bl	8001e18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <vPortFree+0xb4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a06      	ldr	r2, [pc, #24]	@ (80029e4 <vPortFree+0xb4>)
 80029cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029ce:	6938      	ldr	r0, [r7, #16]
 80029d0:	f000 f86c 	bl	8002aac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029d4:	f7ff fa2e 	bl	8001e34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029d8:	bf00      	nop
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200010ac 	.word	0x200010ac
 80029e4:	200010a4 	.word	0x200010a4

080029e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <prvHeapInit+0xac>)
 80029f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3307      	adds	r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <prvHeapInit+0xac>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a20:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <prvHeapInit+0xb0>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <prvHeapInit+0xb0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a34:	2208      	movs	r2, #8
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0307 	bic.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a15      	ldr	r2, [pc, #84]	@ (8002a9c <prvHeapInit+0xb4>)
 8002a48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <prvHeapInit+0xb4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <prvHeapInit+0xb4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <prvHeapInit+0xb4>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <prvHeapInit+0xb8>)
 8002a76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a09      	ldr	r2, [pc, #36]	@ (8002aa4 <prvHeapInit+0xbc>)
 8002a7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <prvHeapInit+0xc0>)
 8002a82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000498 	.word	0x20000498
 8002a98:	20001098 	.word	0x20001098
 8002a9c:	200010a0 	.word	0x200010a0
 8002aa0:	200010a8 	.word	0x200010a8
 8002aa4:	200010a4 	.word	0x200010a4
 8002aa8:	200010ac 	.word	0x200010ac

08002aac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ab4:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <prvInsertBlockIntoFreeList+0xa8>)
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e002      	b.n	8002ac0 <prvInsertBlockIntoFreeList+0x14>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d8f7      	bhi.n	8002aba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d108      	bne.n	8002aee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	441a      	add	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d118      	bne.n	8002b34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <prvInsertBlockIntoFreeList+0xac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d00d      	beq.n	8002b2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e008      	b.n	8002b3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <prvInsertBlockIntoFreeList+0xac>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e003      	b.n	8002b3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d002      	beq.n	8002b4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20001098 	.word	0x20001098
 8002b58:	200010a0 	.word	0x200010a0

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <_reclaim_reent>:
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c24 <_reclaim_reent+0xb8>)
 8002b6e:	b570      	push	{r4, r5, r6, lr}
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4604      	mov	r4, r0
 8002b74:	4283      	cmp	r3, r0
 8002b76:	d053      	beq.n	8002c20 <_reclaim_reent+0xb4>
 8002b78:	69c3      	ldr	r3, [r0, #28]
 8002b7a:	b31b      	cbz	r3, 8002bc4 <_reclaim_reent+0x58>
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	b163      	cbz	r3, 8002b9a <_reclaim_reent+0x2e>
 8002b80:	2500      	movs	r5, #0
 8002b82:	69e3      	ldr	r3, [r4, #28]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	5959      	ldr	r1, [r3, r5]
 8002b88:	b9b1      	cbnz	r1, 8002bb8 <_reclaim_reent+0x4c>
 8002b8a:	3504      	adds	r5, #4
 8002b8c:	2d80      	cmp	r5, #128	@ 0x80
 8002b8e:	d1f8      	bne.n	8002b82 <_reclaim_reent+0x16>
 8002b90:	69e3      	ldr	r3, [r4, #28]
 8002b92:	4620      	mov	r0, r4
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	f000 f86d 	bl	8002c74 <_free_r>
 8002b9a:	69e3      	ldr	r3, [r4, #28]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	b111      	cbz	r1, 8002ba6 <_reclaim_reent+0x3a>
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 f867 	bl	8002c74 <_free_r>
 8002ba6:	69e3      	ldr	r3, [r4, #28]
 8002ba8:	689d      	ldr	r5, [r3, #8]
 8002baa:	b15d      	cbz	r5, 8002bc4 <_reclaim_reent+0x58>
 8002bac:	4629      	mov	r1, r5
 8002bae:	4620      	mov	r0, r4
 8002bb0:	682d      	ldr	r5, [r5, #0]
 8002bb2:	f000 f85f 	bl	8002c74 <_free_r>
 8002bb6:	e7f8      	b.n	8002baa <_reclaim_reent+0x3e>
 8002bb8:	680e      	ldr	r6, [r1, #0]
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f000 f85a 	bl	8002c74 <_free_r>
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	e7e1      	b.n	8002b88 <_reclaim_reent+0x1c>
 8002bc4:	6961      	ldr	r1, [r4, #20]
 8002bc6:	b111      	cbz	r1, 8002bce <_reclaim_reent+0x62>
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f000 f853 	bl	8002c74 <_free_r>
 8002bce:	69e1      	ldr	r1, [r4, #28]
 8002bd0:	b111      	cbz	r1, 8002bd8 <_reclaim_reent+0x6c>
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f000 f84e 	bl	8002c74 <_free_r>
 8002bd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002bda:	b111      	cbz	r1, 8002be2 <_reclaim_reent+0x76>
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f000 f849 	bl	8002c74 <_free_r>
 8002be2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002be4:	b111      	cbz	r1, 8002bec <_reclaim_reent+0x80>
 8002be6:	4620      	mov	r0, r4
 8002be8:	f000 f844 	bl	8002c74 <_free_r>
 8002bec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002bee:	b111      	cbz	r1, 8002bf6 <_reclaim_reent+0x8a>
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f000 f83f 	bl	8002c74 <_free_r>
 8002bf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002bf8:	b111      	cbz	r1, 8002c00 <_reclaim_reent+0x94>
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f000 f83a 	bl	8002c74 <_free_r>
 8002c00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002c02:	b111      	cbz	r1, 8002c0a <_reclaim_reent+0x9e>
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f835 	bl	8002c74 <_free_r>
 8002c0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002c0c:	b111      	cbz	r1, 8002c14 <_reclaim_reent+0xa8>
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f000 f830 	bl	8002c74 <_free_r>
 8002c14:	6a23      	ldr	r3, [r4, #32]
 8002c16:	b11b      	cbz	r3, 8002c20 <_reclaim_reent+0xb4>
 8002c18:	4620      	mov	r0, r4
 8002c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002c1e:	4718      	bx	r3
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	bf00      	nop
 8002c24:	20000010 	.word	0x20000010

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	4d0c      	ldr	r5, [pc, #48]	@ (8002c60 <__libc_init_array+0x38>)
 8002c2e:	4c0d      	ldr	r4, [pc, #52]	@ (8002c64 <__libc_init_array+0x3c>)
 8002c30:	1b64      	subs	r4, r4, r5
 8002c32:	10a4      	asrs	r4, r4, #2
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	f000 f870 	bl	8002d1c <_init>
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c68 <__libc_init_array+0x40>)
 8002c40:	4c0a      	ldr	r4, [pc, #40]	@ (8002c6c <__libc_init_array+0x44>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08002d8c 	.word	0x08002d8c
 8002c64:	08002d8c 	.word	0x08002d8c
 8002c68:	08002d8c 	.word	0x08002d8c
 8002c6c:	08002d90 	.word	0x08002d90

08002c70 <__retarget_lock_acquire_recursive>:
 8002c70:	4770      	bx	lr

08002c72 <__retarget_lock_release_recursive>:
 8002c72:	4770      	bx	lr

08002c74 <_free_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4605      	mov	r5, r0
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d040      	beq.n	8002cfe <_free_r+0x8a>
 8002c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c80:	1f0c      	subs	r4, r1, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bfb8      	it	lt
 8002c86:	18e4      	addlt	r4, r4, r3
 8002c88:	f000 f83c 	bl	8002d04 <__malloc_lock>
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <_free_r+0x8c>)
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	b933      	cbnz	r3, 8002ca0 <_free_r+0x2c>
 8002c92:	6063      	str	r3, [r4, #4]
 8002c94:	6014      	str	r4, [r2, #0]
 8002c96:	4628      	mov	r0, r5
 8002c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c9c:	f000 b838 	b.w	8002d10 <__malloc_unlock>
 8002ca0:	42a3      	cmp	r3, r4
 8002ca2:	d908      	bls.n	8002cb6 <_free_r+0x42>
 8002ca4:	6820      	ldr	r0, [r4, #0]
 8002ca6:	1821      	adds	r1, r4, r0
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	bf01      	itttt	eq
 8002cac:	6819      	ldreq	r1, [r3, #0]
 8002cae:	685b      	ldreq	r3, [r3, #4]
 8002cb0:	1809      	addeq	r1, r1, r0
 8002cb2:	6021      	streq	r1, [r4, #0]
 8002cb4:	e7ed      	b.n	8002c92 <_free_r+0x1e>
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	b10b      	cbz	r3, 8002cc0 <_free_r+0x4c>
 8002cbc:	42a3      	cmp	r3, r4
 8002cbe:	d9fa      	bls.n	8002cb6 <_free_r+0x42>
 8002cc0:	6811      	ldr	r1, [r2, #0]
 8002cc2:	1850      	adds	r0, r2, r1
 8002cc4:	42a0      	cmp	r0, r4
 8002cc6:	d10b      	bne.n	8002ce0 <_free_r+0x6c>
 8002cc8:	6820      	ldr	r0, [r4, #0]
 8002cca:	4401      	add	r1, r0
 8002ccc:	1850      	adds	r0, r2, r1
 8002cce:	4283      	cmp	r3, r0
 8002cd0:	6011      	str	r1, [r2, #0]
 8002cd2:	d1e0      	bne.n	8002c96 <_free_r+0x22>
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4408      	add	r0, r1
 8002cda:	6010      	str	r0, [r2, #0]
 8002cdc:	6053      	str	r3, [r2, #4]
 8002cde:	e7da      	b.n	8002c96 <_free_r+0x22>
 8002ce0:	d902      	bls.n	8002ce8 <_free_r+0x74>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	602b      	str	r3, [r5, #0]
 8002ce6:	e7d6      	b.n	8002c96 <_free_r+0x22>
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	1821      	adds	r1, r4, r0
 8002cec:	428b      	cmp	r3, r1
 8002cee:	bf01      	itttt	eq
 8002cf0:	6819      	ldreq	r1, [r3, #0]
 8002cf2:	685b      	ldreq	r3, [r3, #4]
 8002cf4:	1809      	addeq	r1, r1, r0
 8002cf6:	6021      	streq	r1, [r4, #0]
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	6054      	str	r4, [r2, #4]
 8002cfc:	e7cb      	b.n	8002c96 <_free_r+0x22>
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	200011ec 	.word	0x200011ec

08002d04 <__malloc_lock>:
 8002d04:	4801      	ldr	r0, [pc, #4]	@ (8002d0c <__malloc_lock+0x8>)
 8002d06:	f7ff bfb3 	b.w	8002c70 <__retarget_lock_acquire_recursive>
 8002d0a:	bf00      	nop
 8002d0c:	200011e8 	.word	0x200011e8

08002d10 <__malloc_unlock>:
 8002d10:	4801      	ldr	r0, [pc, #4]	@ (8002d18 <__malloc_unlock+0x8>)
 8002d12:	f7ff bfae 	b.w	8002c72 <__retarget_lock_release_recursive>
 8002d16:	bf00      	nop
 8002d18:	200011e8 	.word	0x200011e8

08002d1c <_init>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr

08002d28 <_fini>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr
