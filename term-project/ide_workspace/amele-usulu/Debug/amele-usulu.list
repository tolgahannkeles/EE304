
amele-usulu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ac  080030ac  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080030ac  080030ac  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080030ac  080030ac  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ac  080030ac  000040ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080030b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000005c  08003110  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003110  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004acf  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d4  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000493  00000000  00000000  0000b878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f63  00000000  00000000  0000bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000830f  00000000  00000000  00022c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fd86  00000000  00000000  0002af7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aad03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c04  00000000  00000000  000aad48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ac94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff8 	.word	0x08002ff8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002ff8 	.word	0x08002ff8

0800014c <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
	
void Delay(uint32_t nCount)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000154:	e002      	b.n	800015c <Delay+0x10>
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	3b01      	subs	r3, #1
 800015a:	607b      	str	r3, [r7, #4]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d1f9      	bne.n	8000156 <Delay+0xa>
}
 8000162:	bf00      	nop
 8000164:	bf00      	nop
 8000166:	370c      	adds	r7, #12
 8000168:	46bd      	mov	sp, r7
 800016a:	bc80      	pop	{r7}
 800016c:	4770      	bx	lr

0800016e <lcd_delay>:
void lcd_delay(void)
{
 800016e:	b580      	push	{r7, lr}
 8000170:	af00      	add	r7, sp, #0
	Delay(200);
 8000172:	20c8      	movs	r0, #200	@ 0xc8
 8000174:	f7ff ffea 	bl	800014c <Delay>
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}

0800017c <lcd_cmd>:

void lcd_cmd(char out_char)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000186:	4b57      	ldr	r3, [pc, #348]	@ (80002e4 <lcd_cmd+0x168>)
 8000188:	2204      	movs	r2, #4
 800018a:	615a      	str	r2, [r3, #20]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800018c:	4b55      	ldr	r3, [pc, #340]	@ (80002e4 <lcd_cmd+0x168>)
 800018e:	2202      	movs	r2, #2
 8000190:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000192:	4b54      	ldr	r3, [pc, #336]	@ (80002e4 <lcd_cmd+0x168>)
 8000194:	2210      	movs	r2, #16
 8000196:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000198:	4b52      	ldr	r3, [pc, #328]	@ (80002e4 <lcd_cmd+0x168>)
 800019a:	2220      	movs	r2, #32
 800019c:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 800019e:	4b51      	ldr	r3, [pc, #324]	@ (80002e4 <lcd_cmd+0x168>)
 80001a0:	2240      	movs	r2, #64	@ 0x40
 80001a2:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80001a4:	4b4f      	ldr	r3, [pc, #316]	@ (80002e4 <lcd_cmd+0x168>)
 80001a6:	2280      	movs	r2, #128	@ 0x80
 80001a8:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 80001aa:	f7ff ffe0 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80001ae:	4b4d      	ldr	r3, [pc, #308]	@ (80002e4 <lcd_cmd+0x168>)
 80001b0:	68db      	ldr	r3, [r3, #12]
 80001b2:	4a4c      	ldr	r2, [pc, #304]	@ (80002e4 <lcd_cmd+0x168>)
 80001b4:	f043 0302 	orr.w	r3, r3, #2
 80001b8:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d003      	beq.n	80001cc <lcd_cmd+0x50>
 80001c4:	4b47      	ldr	r3, [pc, #284]	@ (80002e4 <lcd_cmd+0x168>)
 80001c6:	2210      	movs	r2, #16
 80001c8:	611a      	str	r2, [r3, #16]
 80001ca:	e003      	b.n	80001d4 <lcd_cmd+0x58>
 80001cc:	4b45      	ldr	r3, [pc, #276]	@ (80002e4 <lcd_cmd+0x168>)
 80001ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001d2:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	f003 0320 	and.w	r3, r3, #32
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d003      	beq.n	80001e6 <lcd_cmd+0x6a>
 80001de:	4b41      	ldr	r3, [pc, #260]	@ (80002e4 <lcd_cmd+0x168>)
 80001e0:	2220      	movs	r2, #32
 80001e2:	611a      	str	r2, [r3, #16]
 80001e4:	e003      	b.n	80001ee <lcd_cmd+0x72>
 80001e6:	4b3f      	ldr	r3, [pc, #252]	@ (80002e4 <lcd_cmd+0x168>)
 80001e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80001ec:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d003      	beq.n	8000200 <lcd_cmd+0x84>
 80001f8:	4b3a      	ldr	r3, [pc, #232]	@ (80002e4 <lcd_cmd+0x168>)
 80001fa:	2240      	movs	r2, #64	@ 0x40
 80001fc:	611a      	str	r2, [r3, #16]
 80001fe:	e003      	b.n	8000208 <lcd_cmd+0x8c>
 8000200:	4b38      	ldr	r3, [pc, #224]	@ (80002e4 <lcd_cmd+0x168>)
 8000202:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000206:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da03      	bge.n	8000218 <lcd_cmd+0x9c>
 8000210:	4b34      	ldr	r3, [pc, #208]	@ (80002e4 <lcd_cmd+0x168>)
 8000212:	2280      	movs	r2, #128	@ 0x80
 8000214:	611a      	str	r2, [r3, #16]
 8000216:	e003      	b.n	8000220 <lcd_cmd+0xa4>
 8000218:	4b32      	ldr	r3, [pc, #200]	@ (80002e4 <lcd_cmd+0x168>)
 800021a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800021e:	611a      	str	r2, [r3, #16]
	
	lcd_delay();
 8000220:	f7ff ffa5 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000224:	4b2f      	ldr	r3, [pc, #188]	@ (80002e4 <lcd_cmd+0x168>)
 8000226:	2202      	movs	r2, #2
 8000228:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800022a:	4b2e      	ldr	r3, [pc, #184]	@ (80002e4 <lcd_cmd+0x168>)
 800022c:	2210      	movs	r2, #16
 800022e:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000230:	4b2c      	ldr	r3, [pc, #176]	@ (80002e4 <lcd_cmd+0x168>)
 8000232:	2220      	movs	r2, #32
 8000234:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000236:	4b2b      	ldr	r3, [pc, #172]	@ (80002e4 <lcd_cmd+0x168>)
 8000238:	2240      	movs	r2, #64	@ 0x40
 800023a:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800023c:	4b29      	ldr	r3, [pc, #164]	@ (80002e4 <lcd_cmd+0x168>)
 800023e:	2280      	movs	r2, #128	@ 0x80
 8000240:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 8000242:	f7ff ff94 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000246:	4b27      	ldr	r3, [pc, #156]	@ (80002e4 <lcd_cmd+0x168>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a26      	ldr	r2, [pc, #152]	@ (80002e4 <lcd_cmd+0x168>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d003      	beq.n	8000264 <lcd_cmd+0xe8>
 800025c:	4b21      	ldr	r3, [pc, #132]	@ (80002e4 <lcd_cmd+0x168>)
 800025e:	2210      	movs	r2, #16
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	e003      	b.n	800026c <lcd_cmd+0xf0>
 8000264:	4b1f      	ldr	r3, [pc, #124]	@ (80002e4 <lcd_cmd+0x168>)
 8000266:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800026a:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <lcd_cmd+0x102>
 8000276:	4b1b      	ldr	r3, [pc, #108]	@ (80002e4 <lcd_cmd+0x168>)
 8000278:	2220      	movs	r2, #32
 800027a:	611a      	str	r2, [r3, #16]
 800027c:	e003      	b.n	8000286 <lcd_cmd+0x10a>
 800027e:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <lcd_cmd+0x168>)
 8000280:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000284:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	2b00      	cmp	r3, #0
 800028e:	d003      	beq.n	8000298 <lcd_cmd+0x11c>
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <lcd_cmd+0x168>)
 8000292:	2240      	movs	r2, #64	@ 0x40
 8000294:	611a      	str	r2, [r3, #16]
 8000296:	e003      	b.n	80002a0 <lcd_cmd+0x124>
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <lcd_cmd+0x168>)
 800029a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800029e:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f003 0308 	and.w	r3, r3, #8
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <lcd_cmd+0x136>
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <lcd_cmd+0x168>)
 80002ac:	2280      	movs	r2, #128	@ 0x80
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	e003      	b.n	80002ba <lcd_cmd+0x13e>
 80002b2:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <lcd_cmd+0x168>)
 80002b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002b8:	611a      	str	r2, [r3, #16]

	lcd_delay();
 80002ba:	f7ff ff58 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80002be:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <lcd_cmd+0x168>)
 80002c0:	2202      	movs	r2, #2
 80002c2:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <lcd_cmd+0x168>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80002ca:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <lcd_cmd+0x168>)
 80002cc:	2220      	movs	r2, #32
 80002ce:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80002d0:	4b04      	ldr	r3, [pc, #16]	@ (80002e4 <lcd_cmd+0x168>)
 80002d2:	2240      	movs	r2, #64	@ 0x40
 80002d4:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <lcd_cmd+0x168>)
 80002d8:	2280      	movs	r2, #128	@ 0x80
 80002da:	615a      	str	r2, [r3, #20]
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80002f2:	4b59      	ldr	r3, [pc, #356]	@ (8000458 <lcd_char_cp+0x170>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a58      	ldr	r2, [pc, #352]	@ (8000458 <lcd_char_cp+0x170>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	60d3      	str	r3, [r2, #12]
	
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002fe:	4b56      	ldr	r3, [pc, #344]	@ (8000458 <lcd_char_cp+0x170>)
 8000300:	2202      	movs	r2, #2
 8000302:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000304:	4b54      	ldr	r3, [pc, #336]	@ (8000458 <lcd_char_cp+0x170>)
 8000306:	2210      	movs	r2, #16
 8000308:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800030a:	4b53      	ldr	r3, [pc, #332]	@ (8000458 <lcd_char_cp+0x170>)
 800030c:	2220      	movs	r2, #32
 800030e:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000310:	4b51      	ldr	r3, [pc, #324]	@ (8000458 <lcd_char_cp+0x170>)
 8000312:	2240      	movs	r2, #64	@ 0x40
 8000314:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000316:	4b50      	ldr	r3, [pc, #320]	@ (8000458 <lcd_char_cp+0x170>)
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 800031c:	f7ff ff27 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000320:	4b4d      	ldr	r3, [pc, #308]	@ (8000458 <lcd_char_cp+0x170>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a4c      	ldr	r2, [pc, #304]	@ (8000458 <lcd_char_cp+0x170>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	60d3      	str	r3, [r2, #12]
		
	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 0310 	and.w	r3, r3, #16
 8000332:	2b00      	cmp	r3, #0
 8000334:	d003      	beq.n	800033e <lcd_char_cp+0x56>
 8000336:	4b48      	ldr	r3, [pc, #288]	@ (8000458 <lcd_char_cp+0x170>)
 8000338:	2210      	movs	r2, #16
 800033a:	611a      	str	r2, [r3, #16]
 800033c:	e003      	b.n	8000346 <lcd_char_cp+0x5e>
 800033e:	4b46      	ldr	r3, [pc, #280]	@ (8000458 <lcd_char_cp+0x170>)
 8000340:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000344:	611a      	str	r2, [r3, #16]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	2b00      	cmp	r3, #0
 800034e:	d003      	beq.n	8000358 <lcd_char_cp+0x70>
 8000350:	4b41      	ldr	r3, [pc, #260]	@ (8000458 <lcd_char_cp+0x170>)
 8000352:	2220      	movs	r2, #32
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	e003      	b.n	8000360 <lcd_char_cp+0x78>
 8000358:	4b3f      	ldr	r3, [pc, #252]	@ (8000458 <lcd_char_cp+0x170>)
 800035a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800035e:	611a      	str	r2, [r3, #16]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000366:	2b00      	cmp	r3, #0
 8000368:	d003      	beq.n	8000372 <lcd_char_cp+0x8a>
 800036a:	4b3b      	ldr	r3, [pc, #236]	@ (8000458 <lcd_char_cp+0x170>)
 800036c:	2240      	movs	r2, #64	@ 0x40
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	e003      	b.n	800037a <lcd_char_cp+0x92>
 8000372:	4b39      	ldr	r3, [pc, #228]	@ (8000458 <lcd_char_cp+0x170>)
 8000374:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000378:	611a      	str	r2, [r3, #16]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800037a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037e:	2b00      	cmp	r3, #0
 8000380:	da03      	bge.n	800038a <lcd_char_cp+0xa2>
 8000382:	4b35      	ldr	r3, [pc, #212]	@ (8000458 <lcd_char_cp+0x170>)
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	611a      	str	r2, [r3, #16]
 8000388:	e003      	b.n	8000392 <lcd_char_cp+0xaa>
 800038a:	4b33      	ldr	r3, [pc, #204]	@ (8000458 <lcd_char_cp+0x170>)
 800038c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000390:	611a      	str	r2, [r3, #16]
	
	lcd_delay();
 8000392:	f7ff feec 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000396:	4b30      	ldr	r3, [pc, #192]	@ (8000458 <lcd_char_cp+0x170>)
 8000398:	2202      	movs	r2, #2
 800039a:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800039c:	4b2e      	ldr	r3, [pc, #184]	@ (8000458 <lcd_char_cp+0x170>)
 800039e:	2210      	movs	r2, #16
 80003a0:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000458 <lcd_char_cp+0x170>)
 80003a4:	2220      	movs	r2, #32
 80003a6:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000458 <lcd_char_cp+0x170>)
 80003aa:	2240      	movs	r2, #64	@ 0x40
 80003ac:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000458 <lcd_char_cp+0x170>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	615a      	str	r2, [r3, #20]
	
	lcd_delay();
 80003b4:	f7ff fedb 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003b8:	4b27      	ldr	r3, [pc, #156]	@ (8000458 <lcd_char_cp+0x170>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a26      	ldr	r2, [pc, #152]	@ (8000458 <lcd_char_cp+0x170>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	60d3      	str	r3, [r2, #12]
	
	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <lcd_char_cp+0xee>
 80003ce:	4b22      	ldr	r3, [pc, #136]	@ (8000458 <lcd_char_cp+0x170>)
 80003d0:	2210      	movs	r2, #16
 80003d2:	611a      	str	r2, [r3, #16]
 80003d4:	e003      	b.n	80003de <lcd_char_cp+0xf6>
 80003d6:	4b20      	ldr	r3, [pc, #128]	@ (8000458 <lcd_char_cp+0x170>)
 80003d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003dc:	611a      	str	r2, [r3, #16]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f003 0302 	and.w	r3, r3, #2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d003      	beq.n	80003f0 <lcd_char_cp+0x108>
 80003e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000458 <lcd_char_cp+0x170>)
 80003ea:	2220      	movs	r2, #32
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	e003      	b.n	80003f8 <lcd_char_cp+0x110>
 80003f0:	4b19      	ldr	r3, [pc, #100]	@ (8000458 <lcd_char_cp+0x170>)
 80003f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80003f6:	611a      	str	r2, [r3, #16]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d003      	beq.n	800040a <lcd_char_cp+0x122>
 8000402:	4b15      	ldr	r3, [pc, #84]	@ (8000458 <lcd_char_cp+0x170>)
 8000404:	2240      	movs	r2, #64	@ 0x40
 8000406:	611a      	str	r2, [r3, #16]
 8000408:	e003      	b.n	8000412 <lcd_char_cp+0x12a>
 800040a:	4b13      	ldr	r3, [pc, #76]	@ (8000458 <lcd_char_cp+0x170>)
 800040c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000410:	611a      	str	r2, [r3, #16]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	2b00      	cmp	r3, #0
 800041a:	d003      	beq.n	8000424 <lcd_char_cp+0x13c>
 800041c:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <lcd_char_cp+0x170>)
 800041e:	2280      	movs	r2, #128	@ 0x80
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	e003      	b.n	800042c <lcd_char_cp+0x144>
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <lcd_char_cp+0x170>)
 8000426:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800042a:	611a      	str	r2, [r3, #16]

	lcd_delay();
 800042c:	f7ff fe9f 	bl	800016e <lcd_delay>
	
	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <lcd_char_cp+0x170>)
 8000432:	2202      	movs	r2, #2
 8000434:	615a      	str	r2, [r3, #20]
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <lcd_char_cp+0x170>)
 8000438:	2210      	movs	r2, #16
 800043a:	615a      	str	r2, [r3, #20]
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <lcd_char_cp+0x170>)
 800043e:	2220      	movs	r2, #32
 8000440:	615a      	str	r2, [r3, #20]
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <lcd_char_cp+0x170>)
 8000444:	2240      	movs	r2, #64	@ 0x40
 8000446:	615a      	str	r2, [r3, #20]
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000448:	4b03      	ldr	r3, [pc, #12]	@ (8000458 <lcd_char_cp+0x170>)
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	615a      	str	r2, [r3, #20]
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010800 	.word	0x40010800

0800045c <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000464:	e008      	b.n	8000478 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	607a      	str	r2, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff3a 	bl	80002e8 <lcd_char_cp>
        lcd_delay();
 8000474:	f7ff fe7b 	bl	800016e <lcd_delay>
	while(*out_char)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f2      	bne.n	8000466 <lcd_out_cp+0xa>
	}
	
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <lcd_init>:


void lcd_init(char bits, char font, char lines)
{		
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]
 8000494:	460b      	mov	r3, r1
 8000496:	71bb      	strb	r3, [r7, #6]
 8000498:	4613      	mov	r3, r2
 800049a:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 800049c:	20fa      	movs	r0, #250	@ 0xfa
 800049e:	f000 fb43 	bl	8000b28 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 80004a2:	2002      	movs	r0, #2
 80004a4:	f7ff fe6a 	bl	800017c <lcd_cmd>
    HAL_Delay(50);
 80004a8:	2032      	movs	r0, #50	@ 0x32
 80004aa:	f000 fb3d 	bl	8000b28 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	4313      	orrs	r3, r2
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	797b      	ldrb	r3, [r7, #5]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe5a 	bl	800017c <lcd_cmd>
    HAL_Delay(50);
 80004c8:	2032      	movs	r0, #50	@ 0x32
 80004ca:	f000 fb2d 	bl	8000b28 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 80004ce:	2006      	movs	r0, #6
 80004d0:	f7ff fe54 	bl	800017c <lcd_cmd>
    HAL_Delay(50);
 80004d4:	2032      	movs	r0, #50	@ 0x32
 80004d6:	f000 fb27 	bl	8000b28 <HAL_Delay>
    lcd_cmd(0x0E);
 80004da:	200e      	movs	r0, #14
 80004dc:	f7ff fe4e 	bl	800017c <lcd_cmd>
    HAL_Delay(50);
 80004e0:	2032      	movs	r0, #50	@ 0x32
 80004e2:	f000 fb21 	bl	8000b28 <HAL_Delay>
    lcd_cmd(0x0C);
 80004e6:	200c      	movs	r0, #12
 80004e8:	f7ff fe48 	bl	800017c <lcd_cmd>
    HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	@ 0x32
 80004ee:	f000 fb1b 	bl	8000b28 <HAL_Delay>
    lcd_cmd(0x01);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff fe42 	bl	800017c <lcd_cmd>
    HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	@ 0x64
 80004fa:	f000 fb15 	bl	8000b28 <HAL_Delay>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{	
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	460a      	mov	r2, r1
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	4613      	mov	r3, r2
 8000514:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d106      	bne.n	800052a <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 800051c:	79bb      	ldrb	r3, [r7, #6]
 800051e:	337f      	adds	r3, #127	@ 0x7f
 8000520:	b2db      	uxtb	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe2a 	bl	800017c <lcd_cmd>
 8000528:	e008      	b.n	800053c <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d105      	bne.n	800053c <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8000530:	79bb      	ldrb	r3, [r7, #6]
 8000532:	3b41      	subs	r3, #65	@ 0x41
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe20 	bl	800017c <lcd_cmd>
	} 
    HAL_Delay(5);    
 800053c:	2005      	movs	r0, #5
 800053e:	f000 faf3 	bl	8000b28 <HAL_Delay>
    
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	4603      	mov	r3, r0
 8000552:	603a      	str	r2, [r7, #0]
 8000554:	71fb      	strb	r3, [r7, #7]
 8000556:	460b      	mov	r3, r1
 8000558:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffd0 	bl	8000506 <lcd_gotoxy>
	lcd_out_cp(out_char);  
 8000566:	6838      	ldr	r0, [r7, #0]
 8000568:	f7ff ff78 	bl	800045c <lcd_out_cp>
    HAL_Delay(5);      
 800056c:	2005      	movs	r0, #5
 800056e:	f000 fadb 	bl	8000b28 <HAL_Delay>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <lcd_clear>:
void lcd_clear(void) {
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
    
	lcd_cmd(_CLEAR);
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fdfc 	bl	800017c <lcd_cmd>
    HAL_Delay(5);
 8000584:	2005      	movs	r0, #5
 8000586:	f000 facf 	bl	8000b28 <HAL_Delay>
    
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fa65 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f883 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f91f 	bl	80007e0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005a2:	f000 f8d3 	bl	800074c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 80005a6:	2208      	movs	r2, #8
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ff6d 	bl	800048a <lcd_init>
  lcd_print(1, 1, "test");
 80005b0:	4a2e      	ldr	r2, [pc, #184]	@ (800066c <main+0xdc>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ffc8 	bl	800054a <lcd_print>

  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005be:	f000 fab3 	bl	8000b28 <HAL_Delay>
  lcd_clear();
 80005c2:	f7ff ffda 	bl	800057a <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005c6:	2200      	movs	r2, #0
 80005c8:	4929      	ldr	r1, [pc, #164]	@ (8000670 <main+0xe0>)
 80005ca:	482a      	ldr	r0, [pc, #168]	@ (8000674 <main+0xe4>)
 80005cc:	f001 fbe0 	bl	8001d90 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80005d0:	2200      	movs	r2, #0
 80005d2:	4929      	ldr	r1, [pc, #164]	@ (8000678 <main+0xe8>)
 80005d4:	4827      	ldr	r0, [pc, #156]	@ (8000674 <main+0xe4>)
 80005d6:	f001 fd69 	bl	80020ac <HAL_RTC_GetDate>

	  day = DateToUpdate.Date;
 80005da:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <main+0xe8>)
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	461a      	mov	r2, r3
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <main+0xec>)
 80005e2:	801a      	strh	r2, [r3, #0]
	  month = DateToUpdate.Month;
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <main+0xe8>)
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <main+0xf0>)
 80005ec:	801a      	strh	r2, [r3, #0]
	  year = DateToUpdate.Year;
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <main+0xe8>)
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b23      	ldr	r3, [pc, #140]	@ (8000684 <main+0xf4>)
 80005f6:	801a      	strh	r2, [r3, #0]

	  second = sTime.Seconds;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <main+0xe0>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <main+0xf8>)
 8000600:	801a      	strh	r2, [r3, #0]
	  minute = sTime.Minutes;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <main+0xe0>)
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	461a      	mov	r2, r3
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <main+0xfc>)
 800060a:	801a      	strh	r2, [r3, #0]
	  hour = sTime.Hours;
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <main+0xe0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <main+0x100>)
 8000614:	801a      	strh	r2, [r3, #0]

	  sprintf(line1, "%.2d:%.2d:%.2d", hour,minute,second);
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <main+0x100>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <main+0xfc>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <main+0xf8>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	491a      	ldr	r1, [pc, #104]	@ (8000694 <main+0x104>)
 800062c:	481a      	ldr	r0, [pc, #104]	@ (8000698 <main+0x108>)
 800062e:	f002 f833 	bl	8002698 <siprintf>
	  sprintf(line2, "%.2d-%.2d-%.2d", day,month,year);
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <main+0xec>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <main+0xf0>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0xf4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	460b      	mov	r3, r1
 8000646:	4915      	ldr	r1, [pc, #84]	@ (800069c <main+0x10c>)
 8000648:	4815      	ldr	r0, [pc, #84]	@ (80006a0 <main+0x110>)
 800064a:	f002 f825 	bl	8002698 <siprintf>

	  lcd_print(1, 1, line1);
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <main+0x108>)
 8000650:	2101      	movs	r1, #1
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ff79 	bl	800054a <lcd_print>
	  lcd_print(2, 1, line2);
 8000658:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <main+0x110>)
 800065a:	2101      	movs	r1, #1
 800065c:	2002      	movs	r0, #2
 800065e:	f7ff ff74 	bl	800054a <lcd_print>

	  HAL_Delay(250);
 8000662:	20fa      	movs	r0, #250	@ 0xfa
 8000664:	f000 fa60 	bl	8000b28 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000668:	bf00      	nop
 800066a:	e7ac      	b.n	80005c6 <main+0x36>
 800066c:	08003010 	.word	0x08003010
 8000670:	200000cc 	.word	0x200000cc
 8000674:	20000078 	.word	0x20000078
 8000678:	200000d0 	.word	0x200000d0
 800067c:	200000d4 	.word	0x200000d4
 8000680:	200000d6 	.word	0x200000d6
 8000684:	200000d8 	.word	0x200000d8
 8000688:	200000da 	.word	0x200000da
 800068c:	200000dc 	.word	0x200000dc
 8000690:	200000de 	.word	0x200000de
 8000694:	08003018 	.word	0x08003018
 8000698:	2000008c 	.word	0x2000008c
 800069c:	08003028 	.word	0x08003028
 80006a0:	200000ac 	.word	0x200000ac

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ae:	2228      	movs	r2, #40	@ 0x28
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f812 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fcc3 	bl	8001078 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006f8:	f000 f8ca 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff30 	bl	800157c <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000722:	f000 f8b5 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f89c 	bl	8001870 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073e:	f000 f8a7 	bl	8000890 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2100      	movs	r1, #0
 8000756:	460a      	mov	r2, r1
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	460a      	mov	r2, r1
 800075c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_RTC_Init+0x8c>)
 8000764:	4a1d      	ldr	r2, [pc, #116]	@ (80007dc <MX_RTC_Init+0x90>)
 8000766:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_RTC_Init+0x8c>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_RTC_Init+0x8c>)
 8000772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000776:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4817      	ldr	r0, [pc, #92]	@ (80007d8 <MX_RTC_Init+0x8c>)
 800077a:	f001 f9e5 	bl	8001b48 <HAL_RTC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000784:	f000 f884 	bl	8000890 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 8000788:	2313      	movs	r3, #19
 800078a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 37;
 800078c:	2325      	movs	r3, #37	@ 0x25
 800078e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <MX_RTC_Init+0x8c>)
 800079c:	f001 fa60 	bl	8001c60 <HAL_RTC_SetTime>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f000 f873 	bl	8000890 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80007aa:	2304      	movs	r3, #4
 80007ac:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JUNE;
 80007ae:	2306      	movs	r3, #6
 80007b0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 8;
 80007b2:	2308      	movs	r3, #8
 80007b4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 25;
 80007b6:	2319      	movs	r3, #25
 80007b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_RTC_Init+0x8c>)
 80007c2:	f001 fbbd 	bl	8001f40 <HAL_RTC_SetDate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80007cc:	f000 f860 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000078 	.word	0x20000078
 80007dc:	40002800 	.word	0x40002800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <MX_GPIO_Init+0xa4>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <MX_GPIO_Init+0xa4>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0310 	and.w	r3, r3, #16
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080c:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <MX_GPIO_Init+0xa4>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a1c      	ldr	r2, [pc, #112]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_GPIO_Init+0xa4>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <MX_GPIO_Init+0xa4>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_GPIO_Init+0xa4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	21e2      	movs	r1, #226	@ 0xe2
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_GPIO_Init+0xa8>)
 8000842:	f000 fbf5 	bl	8001030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_EN_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8000846:	23e2      	movs	r3, #226	@ 0xe2
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2302      	movs	r3, #2
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <MX_GPIO_Init+0xa8>)
 800085e:	f000 fa6b 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D4_Pin;
 8000862:	2314      	movs	r3, #20
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_GPIO_Init+0xac>)
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_GPIO_Init+0xa8>)
 8000876:	f000 fa5f 	bl	8000d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800
 800088c:	10110000 	.word	0x10110000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x5c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_MspInit+0x60>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <HAL_MspInit+0x60>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010000 	.word	0x40010000

08000900 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0b      	ldr	r2, [pc, #44]	@ (800093c <HAL_RTC_MspInit+0x3c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d110      	bne.n	8000934 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000912:	f000 fba5 	bl	8001060 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_RTC_MspInit+0x40>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <HAL_RTC_MspInit+0x40>)
 800091c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <HAL_RTC_MspInit+0x40>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_RTC_MspInit+0x44>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40002800 	.word	0x40002800
 8000940:	40021000 	.word	0x40021000
 8000944:	4242043c 	.word	0x4242043c

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f8aa 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	@ (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f001 fe8c 	bl	80026ec <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20002800 	.word	0x20002800
 8000a00:	00000400 	.word	0x00000400
 8000a04:	200000e0 	.word	0x200000e0
 8000a08:	20000230 	.word	0x20000230

08000a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a18:	f7ff fff8 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a1e:	490c      	ldr	r1, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a20:	4a0c      	ldr	r2, [pc, #48]	@ (8000a54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a09      	ldr	r2, [pc, #36]	@ (8000a58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a34:	4c09      	ldr	r4, [pc, #36]	@ (8000a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f001 fe59 	bl	80026f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fda3 	bl	8000590 <main>
  bx lr
 8000a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a54:	080030b4 	.word	0x080030b4
  ldr r2, =_sbss
 8000a58:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a5c:	20000230 	.word	0x20000230

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	@ (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f92b 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff ff0c 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f935 	bl	8000d1e <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f90b 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	@ (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200000e4 	.word	0x200000e4

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	200000e4 	.word	0x200000e4

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff90 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff49 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b08b      	sub	sp, #44	@ 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e161      	b.n	8001010 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8150 	bne.w	800100a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a97      	ldr	r2, [pc, #604]	@ (8000fcc <HAL_GPIO_Init+0x294>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05e      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d74:	4a95      	ldr	r2, [pc, #596]	@ (8000fcc <HAL_GPIO_Init+0x294>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d875      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d7a:	4a95      	ldr	r2, [pc, #596]	@ (8000fd0 <HAL_GPIO_Init+0x298>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d058      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d80:	4a93      	ldr	r2, [pc, #588]	@ (8000fd0 <HAL_GPIO_Init+0x298>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d86f      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d86:	4a93      	ldr	r2, [pc, #588]	@ (8000fd4 <HAL_GPIO_Init+0x29c>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d052      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d8c:	4a91      	ldr	r2, [pc, #580]	@ (8000fd4 <HAL_GPIO_Init+0x29c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d869      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d92:	4a91      	ldr	r2, [pc, #580]	@ (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d04c      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000d98:	4a8f      	ldr	r2, [pc, #572]	@ (8000fd8 <HAL_GPIO_Init+0x2a0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d863      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a8f      	ldr	r2, [pc, #572]	@ (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d046      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
 8000da4:	4a8d      	ldr	r2, [pc, #564]	@ (8000fdc <HAL_GPIO_Init+0x2a4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d85d      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d82a      	bhi.n	8000e04 <HAL_GPIO_Init+0xcc>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d859      	bhi.n	8000e66 <HAL_GPIO_Init+0x12e>
 8000db2:	a201      	add	r2, pc, #4	@ (adr r2, 8000db8 <HAL_GPIO_Init+0x80>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e0d 	.word	0x08000e0d
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e67 	.word	0x08000e67
 8000dcc:	08000e67 	.word	0x08000e67
 8000dd0:	08000e67 	.word	0x08000e67
 8000dd4:	08000e67 	.word	0x08000e67
 8000dd8:	08000e67 	.word	0x08000e67
 8000ddc:	08000e67 	.word	0x08000e67
 8000de0:	08000e67 	.word	0x08000e67
 8000de4:	08000e67 	.word	0x08000e67
 8000de8:	08000e67 	.word	0x08000e67
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e67 	.word	0x08000e67
 8000df4:	08000e67 	.word	0x08000e67
 8000df8:	08000e67 	.word	0x08000e67
 8000dfc:	08000e15 	.word	0x08000e15
 8000e00:	08000e29 	.word	0x08000e29
 8000e04:	4a76      	ldr	r2, [pc, #472]	@ (8000fe0 <HAL_GPIO_Init+0x2a8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0a:	e02c      	b.n	8000e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e029      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e024      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	3308      	adds	r3, #8
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e01f      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e01a      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e013      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d105      	bne.n	8000e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	611a      	str	r2, [r3, #16]
          break;
 8000e52:	e009      	b.n	8000e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	615a      	str	r2, [r3, #20]
          break;
 8000e5e:	e003      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x130>
          break;
 8000e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2bff      	cmp	r3, #255	@ 0xff
 8000e6c:	d801      	bhi.n	8000e72 <HAL_GPIO_Init+0x13a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_Init+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3304      	adds	r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2bff      	cmp	r3, #255	@ 0xff
 8000e7c:	d802      	bhi.n	8000e84 <HAL_GPIO_Init+0x14c>
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	e002      	b.n	8000e8a <HAL_GPIO_Init+0x152>
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	3b08      	subs	r3, #8
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	6a39      	ldr	r1, [r7, #32]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80a9 	beq.w	800100a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	@ (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b47      	ldr	r3, [pc, #284]	@ (8000fe4 <HAL_GPIO_Init+0x2ac>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed0:	4a45      	ldr	r2, [pc, #276]	@ (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fec <HAL_GPIO_Init+0x2b4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1dc>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1d8>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e004      	b.n	8000f1a <HAL_GPIO_Init+0x1e2>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x1e2>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_GPIO_Init+0x1e2>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f2a:	492f      	ldr	r1, [pc, #188]	@ (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	492b      	ldr	r1, [pc, #172]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4927      	ldr	r1, [pc, #156]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	4921      	ldr	r1, [pc, #132]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60cb      	str	r3, [r1, #12]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	491d      	ldr	r1, [pc, #116]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4917      	ldr	r1, [pc, #92]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4913      	ldr	r1, [pc, #76]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d01f      	beq.n	8000ffc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <HAL_GPIO_Init+0x2c0>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]
 8000fc8:	e01f      	b.n	800100a <HAL_GPIO_Init+0x2d2>
 8000fca:	bf00      	nop
 8000fcc:	10320000 	.word	0x10320000
 8000fd0:	10310000 	.word	0x10310000
 8000fd4:	10220000 	.word	0x10220000
 8000fd8:	10210000 	.word	0x10210000
 8000fdc:	10120000 	.word	0x10120000
 8000fe0:	10110000 	.word	0x10110000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_GPIO_Init+0x2f4>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	43db      	mvns	r3, r3
 8001004:	4909      	ldr	r1, [pc, #36]	@ (800102c <HAL_GPIO_Init+0x2f4>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	3301      	adds	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001016:	fa22 f303 	lsr.w	r3, r2, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	f47f ae96 	bne.w	8000d4c <HAL_GPIO_Init+0x14>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	372c      	adds	r7, #44	@ 0x2c
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001040:	787b      	ldrb	r3, [r7, #1]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001046:	887a      	ldrh	r2, [r7, #2]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800104c:	e003      	b.n	8001056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	041a      	lsls	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	420e0020 	.word	0x420e0020

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e272      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 8087 	beq.w	80011a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001098:	4b92      	ldr	r3, [pc, #584]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00c      	beq.n	80010be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a4:	4b8f      	ldr	r3, [pc, #572]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d112      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5e>
 80010b0:	4b8c      	ldr	r3, [pc, #560]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010bc:	d10b      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010be:	4b89      	ldr	r3, [pc, #548]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d06c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x12c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d168      	bne.n	80011a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e24c      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x76>
 80010e0:	4b80      	ldr	r3, [pc, #512]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a7f      	ldr	r2, [pc, #508]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e02e      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b7b      	ldr	r3, [pc, #492]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a7a      	ldr	r2, [pc, #488]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b78      	ldr	r3, [pc, #480]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a77      	ldr	r2, [pc, #476]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01d      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0xbc>
 800111a:	4b72      	ldr	r3, [pc, #456]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a71      	ldr	r2, [pc, #452]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b6f      	ldr	r3, [pc, #444]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6e      	ldr	r2, [pc, #440]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00b      	b.n	800114c <HAL_RCC_OscConfig+0xd4>
 8001134:	4b6b      	ldr	r3, [pc, #428]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a6a      	ldr	r2, [pc, #424]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800113a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b68      	ldr	r3, [pc, #416]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a67      	ldr	r2, [pc, #412]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fcde 	bl	8000b14 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fcda 	bl	8000b14 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	@ 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e200      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b5d      	ldr	r3, [pc, #372]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0xe4>
 800117a:	e014      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcca 	bl	8000b14 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcc6 	bl	8000b14 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e1ec      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	4b53      	ldr	r3, [pc, #332]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x10c>
 80011a2:	e000      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d063      	beq.n	800127a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b2:	4b4c      	ldr	r3, [pc, #304]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011be:	4b49      	ldr	r3, [pc, #292]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d11c      	bne.n	8001204 <HAL_RCC_OscConfig+0x18c>
 80011ca:	4b46      	ldr	r3, [pc, #280]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	4b43      	ldr	r3, [pc, #268]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_RCC_OscConfig+0x176>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e1c0      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3d      	ldr	r3, [pc, #244]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4939      	ldr	r1, [pc, #228]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	e03a      	b.n	800127a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120c:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <HAL_RCC_OscConfig+0x270>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fc7f 	bl	8000b14 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fc7b 	bl	8000b14 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1a1      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	4b2d      	ldr	r3, [pc, #180]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4927      	ldr	r1, [pc, #156]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e015      	b.n	800127a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <HAL_RCC_OscConfig+0x270>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc5e 	bl	8000b14 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fc5a 	bl	8000b14 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e180      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d03a      	beq.n	80012fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d019      	beq.n	80012c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_RCC_OscConfig+0x274>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff fc3e 	bl	8000b14 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fc3a 	bl	8000b14 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e160      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 faba 	bl	8001834 <RCC_Delay>
 80012c0:	e01c      	b.n	80012fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_RCC_OscConfig+0x274>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fc24 	bl	8000b14 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ce:	e00f      	b.n	80012f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc20 	bl	8000b14 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d908      	bls.n	80012f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e146      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	42420000 	.word	0x42420000
 80012ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b92      	ldr	r3, [pc, #584]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e9      	bne.n	80012d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a6 	beq.w	8001456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b8b      	ldr	r3, [pc, #556]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b88      	ldr	r3, [pc, #544]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a87      	ldr	r2, [pc, #540]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b85      	ldr	r3, [pc, #532]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b82      	ldr	r3, [pc, #520]	@ (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b7f      	ldr	r3, [pc, #508]	@ (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7e      	ldr	r2, [pc, #504]	@ (8001540 <HAL_RCC_OscConfig+0x4c8>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbe1 	bl	8000b14 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbdd 	bl	8000b14 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b64      	cmp	r3, #100	@ 0x64
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e103      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	4b75      	ldr	r3, [pc, #468]	@ (8001540 <HAL_RCC_OscConfig+0x4c8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x312>
 800137c:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a6e      	ldr	r2, [pc, #440]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6213      	str	r3, [r2, #32]
 8001388:	e02d      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x334>
 8001392:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4a69      	ldr	r2, [pc, #420]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6213      	str	r3, [r2, #32]
 800139e:	4b67      	ldr	r3, [pc, #412]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a66      	ldr	r2, [pc, #408]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x356>
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a60      	ldr	r2, [pc, #384]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	4b5e      	ldr	r3, [pc, #376]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a5d      	ldr	r2, [pc, #372]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x36e>
 80013ce:	4b5b      	ldr	r3, [pc, #364]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a5a      	ldr	r2, [pc, #360]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	4b58      	ldr	r3, [pc, #352]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a57      	ldr	r2, [pc, #348]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb91 	bl	8000b14 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb8d 	bl	8000b14 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0b1      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b4b      	ldr	r3, [pc, #300]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x37e>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb7b 	bl	8000b14 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fb77 	bl	8000b14 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e09b      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b40      	ldr	r3, [pc, #256]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a3b      	ldr	r2, [pc, #236]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8087 	beq.w	800156e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001460:	4b36      	ldr	r3, [pc, #216]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d061      	beq.n	8001530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d146      	bne.n	8001502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_RCC_OscConfig+0x4cc>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb4b 	bl	8000b14 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb47 	bl	8000b14 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e06d      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4921      	ldr	r1, [pc, #132]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a19      	ldr	r1, [r3, #32]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014cc:	430b      	orrs	r3, r1
 80014ce:	491b      	ldr	r1, [pc, #108]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <HAL_RCC_OscConfig+0x4cc>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb1b 	bl	8000b14 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb17 	bl	8000b14 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e03d      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46a>
 8001500:	e035      	b.n	800156e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_RCC_OscConfig+0x4cc>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb04 	bl	8000b14 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb00 	bl	8000b14 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e026      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_RCC_OscConfig+0x4c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x498>
 800152e:	e01e      	b.n	800156e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e019      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
 800153c:	40021000 	.word	0x40021000
 8001540:	40007000 	.word	0x40007000
 8001544:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_OscConfig+0x500>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0d0      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b6a      	ldr	r3, [pc, #424]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d910      	bls.n	80015c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b67      	ldr	r3, [pc, #412]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 0207 	bic.w	r2, r3, #7
 80015a6:	4965      	ldr	r1, [pc, #404]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b63      	ldr	r3, [pc, #396]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0b8      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d8:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a58      	ldr	r2, [pc, #352]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f0:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a52      	ldr	r2, [pc, #328]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4b50      	ldr	r3, [pc, #320]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	494d      	ldr	r1, [pc, #308]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d040      	beq.n	800169c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e07f      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e073      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06b      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4936      	ldr	r1, [pc, #216]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800166c:	f7ff fa52 	bl	8000b14 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff fa4e 	bl	8000b14 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e053      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d210      	bcs.n	80016cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4922      	ldr	r1, [pc, #136]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b20      	ldr	r3, [pc, #128]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e032      	b.n	8001732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4916      	ldr	r1, [pc, #88]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	490e      	ldr	r1, [pc, #56]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170a:	f000 f821 	bl	8001750 <HAL_RCC_GetSysClockFreq>
 800170e:	4602      	mov	r2, r0
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	490a      	ldr	r1, [pc, #40]	@ (8001744 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <HAL_RCC_ClockConfig+0x1cc>)
 8001724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1d0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f9b0 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000
 8001740:	40021000 	.word	0x40021000
 8001744:	08003038 	.word	0x08003038
 8001748:	20000000 	.word	0x20000000
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b04      	cmp	r3, #4
 8001778:	d002      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x30>
 800177a:	2b08      	cmp	r3, #8
 800177c:	d003      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x36>
 800177e:	e027      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001782:	613b      	str	r3, [r7, #16]
      break;
 8001784:	e027      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d010      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0c5b      	lsrs	r3, r3, #17
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017b2:	fb03 f202 	mul.w	r2, r3, r2
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e004      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c4:	fb02 f303 	mul.w	r3, r2, r3
 80017c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	613b      	str	r3, [r7, #16]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80017d2:	613b      	str	r3, [r7, #16]
      break;
 80017d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d6:	693b      	ldr	r3, [r7, #16]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	08003050 	.word	0x08003050
 80017f0:	08003060 	.word	0x08003060
 80017f4:	003d0900 	.word	0x003d0900

080017f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017fc:	4b02      	ldr	r3, [pc, #8]	@ (8001808 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff fff2 	bl	80017f8 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0adb      	lsrs	r3, r3, #11
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	@ (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	08003048 	.word	0x08003048

08001834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <RCC_Delay+0x34>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <RCC_Delay+0x38>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0a5b      	lsrs	r3, r3, #9
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001850:	bf00      	nop
  }
  while (Delay --);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	60fa      	str	r2, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f9      	bne.n	8001850 <RCC_Delay+0x1c>
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000000 	.word	0x20000000
 800186c:	10624dd3 	.word	0x10624dd3

08001870 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d07d      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b4c      	ldr	r3, [pc, #304]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a4b      	ldr	r2, [pc, #300]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b49      	ldr	r3, [pc, #292]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d118      	bne.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c4:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a42      	ldr	r2, [pc, #264]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7ff f920 	bl	8000b14 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff f91c 	bl	8000b14 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e06d      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018f6:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d02e      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d027      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001914:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800191c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800191e:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001924:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800192a:	4a29      	ldr	r2, [pc, #164]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d014      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff f8eb 	bl	8000b14 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f8e7 	bl	8000b14 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e036      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ee      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4917      	ldr	r1, [pc, #92]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001972:	4313      	orrs	r3, r2
 8001974:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4904      	ldr	r1, [pc, #16]	@ (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	42420440 	.word	0x42420440

080019dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d00a      	beq.n	8001a14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	f200 808a 	bhi.w	8001b1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d045      	beq.n	8001a98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d075      	beq.n	8001afe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001a12:	e082      	b.n	8001b1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001a14:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001a1a:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d07b      	beq.n	8001b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a41      	ldr	r2, [pc, #260]	@ (8001b34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0c5b      	lsrs	r3, r3, #17
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	4a3b      	ldr	r2, [pc, #236]	@ (8001b38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001a58:	4a38      	ldr	r2, [pc, #224]	@ (8001b3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e004      	b.n	8001a74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a74:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a80:	d102      	bne.n	8001a88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	61bb      	str	r3, [r7, #24]
      break;
 8001a86:	e04a      	b.n	8001b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
      break;
 8001a96:	e042      	b.n	8001b1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001a98:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa8:	d108      	bne.n	8001abc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e01f      	b.n	8001afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac6:	d109      	bne.n	8001adc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001ad4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	e00f      	b.n	8001afc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ae6:	d11c      	bne.n	8001b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d016      	beq.n	8001b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001af4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001af8:	61bb      	str	r3, [r7, #24]
      break;
 8001afa:	e012      	b.n	8001b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001afc:	e011      	b.n	8001b22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001afe:	f7ff fe85 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0b9b      	lsrs	r3, r3, #14
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	61bb      	str	r3, [r7, #24]
      break;
 8001b18:	e004      	b.n	8001b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e002      	b.n	8001b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001b1e:	bf00      	nop
 8001b20:	e000      	b.n	8001b24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001b22:	bf00      	nop
    }
  }
  return (frequency);
 8001b24:	69bb      	ldr	r3, [r7, #24]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003064 	.word	0x08003064
 8001b38:	08003074 	.word	0x08003074
 8001b3c:	007a1200 	.word	0x007a1200
 8001b40:	003d0900 	.word	0x003d0900
 8001b44:	aaaaaaab 	.word	0xaaaaaaab

08001b48 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07a      	b.n	8001c54 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7c5b      	ldrb	r3, [r3, #17]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fec6 	bl	8000900 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 faea 	bl	8002154 <HAL_RTC_WaitForSynchro>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e061      	b.n	8001c54 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fba3 	bl	80022dc <RTC_EnterInitMode>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e056      	b.n	8001c54 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0207 	bic.w	r2, r2, #7
 8001bb4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001bbe:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RTC_Init+0x114>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a26      	ldr	r2, [pc, #152]	@ (8001c5c <HAL_RTC_Init+0x114>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001bca:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RTC_Init+0x114>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4921      	ldr	r1, [pc, #132]	@ (8001c5c <HAL_RTC_Init+0x114>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d003      	beq.n	8001bee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e00e      	b.n	8001c0c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff fef4 	bl	80019dc <HAL_RCCEx_GetPeriphCLKFreq>
 8001bf4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d104      	bne.n	8001c06 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e026      	b.n	8001c54 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0c1a      	lsrs	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f002 020f 	and.w	r2, r2, #15
 8001c18:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	b292      	uxth	r2, r2
 8001c22:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fb81 	bl	800232c <RTC_ExitInitMode>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00c      	b.n	8001c54 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40006c00 	.word	0x40006c00

08001c60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RTC_SetTime+0x20>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e080      	b.n	8001d86 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	7c1b      	ldrb	r3, [r3, #16]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_RTC_SetTime+0x30>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e07a      	b.n	8001d86 <HAL_RTC_SetTime+0x126>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001cac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a5b      	subs	r3, r3, r1
 8001cbc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001cbe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e01e      	b.n	8001d08 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fb71 	bl	80023b6 <RTC_Bcd2ToByte>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001cdc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fb66 	bl	80023b6 <RTC_Bcd2ToByte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4613      	mov	r3, r2
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001cf6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	789b      	ldrb	r3, [r3, #2]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fb5a 	bl	80023b6 <RTC_Bcd2ToByte>
 8001d02:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001d04:	4423      	add	r3, r4
 8001d06:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d08:	6979      	ldr	r1, [r7, #20]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fa7f 	bl	800220e <RTC_WriteTimeCounter>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e02f      	b.n	8001d86 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0205 	bic.w	r2, r2, #5
 8001d34:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fa90 	bl	800225c <RTC_ReadAlarmCounter>
 8001d3c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d018      	beq.n	8001d78 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d214      	bcs.n	8001d78 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8001d54:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001d58:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d5a:	6939      	ldr	r1, [r7, #16]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fa96 	bl	800228e <RTC_WriteAlarmCounter>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e006      	b.n	8001d86 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
  }
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd90      	pop	{r4, r7, pc}
	...

08001d90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_RTC_GetTime+0x28>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b5      	b.n	8001f28 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0ac      	b.n	8001f28 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f9ed 	bl	80021ae <RTC_ReadTimeCounter>
 8001dd4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4a55      	ldr	r2, [pc, #340]	@ (8001f30 <HAL_RTC_GetTime+0x1a0>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0adb      	lsrs	r3, r3, #11
 8001de0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4b52      	ldr	r3, [pc, #328]	@ (8001f30 <HAL_RTC_GetTime+0x1a0>)
 8001de6:	fba3 1302 	umull	r1, r3, r3, r2
 8001dea:	0adb      	lsrs	r3, r3, #11
 8001dec:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f34 <HAL_RTC_GetTime+0x1a4>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4a4a      	ldr	r2, [pc, #296]	@ (8001f30 <HAL_RTC_GetTime+0x1a0>)
 8001e08:	fba2 1203 	umull	r1, r2, r2, r3
 8001e0c:	0ad2      	lsrs	r2, r2, #11
 8001e0e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8001e12:	fb01 f202 	mul.w	r2, r1, r2
 8001e16:	1a9a      	subs	r2, r3, r2
 8001e18:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RTC_GetTime+0x1a4>)
 8001e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1e:	0959      	lsrs	r1, r3, #5
 8001e20:	460b      	mov	r3, r1
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a5b      	subs	r3, r3, r1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	1ad1      	subs	r1, r2, r3
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b17      	cmp	r3, #23
 8001e34:	d955      	bls.n	8001ee2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4a3f      	ldr	r2, [pc, #252]	@ (8001f38 <HAL_RTC_GetTime+0x1a8>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	4b3c      	ldr	r3, [pc, #240]	@ (8001f38 <HAL_RTC_GetTime+0x1a8>)
 8001e46:	fba3 2301 	umull	r2, r3, r3, r1
 8001e4a:	091a      	lsrs	r2, r3, #4
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1aca      	subs	r2, r1, r3
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f9fd 	bl	800225c <RTC_ReadAlarmCounter>
 8001e62:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d008      	beq.n	8001e7e <HAL_RTC_GetTime+0xee>
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d904      	bls.n	8001e7e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	e002      	b.n	8001e84 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_RTC_GetTime+0x1ac>)
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f9ba 	bl	800220e <RTC_WriteTimeCounter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e041      	b.n	8001f28 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001eb4:	69f9      	ldr	r1, [r7, #28]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f9e9 	bl	800228e <RTC_WriteAlarmCounter>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e030      	b.n	8001f28 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ec6:	69f9      	ldr	r1, [r7, #28]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f9e0 	bl	800228e <RTC_WriteAlarmCounter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e027      	b.n	8001f28 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001ed8:	6979      	ldr	r1, [r7, #20]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fa88 	bl	80023f0 <RTC_DateUpdate>
 8001ee0:	e003      	b.n	8001eea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01a      	beq.n	8001f26 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa41 	bl	800237c <RTC_ByteToBcd2>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fa38 	bl	800237c <RTC_ByteToBcd2>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	789b      	ldrb	r3, [r3, #2]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fa2f 	bl	800237c <RTC_ByteToBcd2>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	91a2b3c5 	.word	0x91a2b3c5
 8001f34:	88888889 	.word	0x88888889
 8001f38:	aaaaaaab 	.word	0xaaaaaaab
 8001f3c:	00015180 	.word	0x00015180

08001f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_RTC_SetDate+0x24>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e097      	b.n	8002098 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	7c1b      	ldrb	r3, [r3, #16]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_RTC_SetDate+0x34>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e091      	b.n	8002098 <HAL_RTC_SetDate+0x158>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	78da      	ldrb	r2, [r3, #3]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	785a      	ldrb	r2, [r3, #1]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	789a      	ldrb	r2, [r3, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	739a      	strb	r2, [r3, #14]
 8001f9e:	e01a      	b.n	8001fd6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	78db      	ldrb	r3, [r3, #3]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fa06 	bl	80023b6 <RTC_Bcd2ToByte>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	785b      	ldrb	r3, [r3, #1]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f9fd 	bl	80023b6 <RTC_Bcd2ToByte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	789b      	ldrb	r3, [r3, #2]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f9f4 	bl	80023b6 <RTC_Bcd2ToByte>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	7bdb      	ldrb	r3, [r3, #15]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	7b59      	ldrb	r1, [r3, #13]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	7b9b      	ldrb	r3, [r3, #14]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f000 fadf 	bl	80025a8 <RTC_WeekDayNum>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	7b1a      	ldrb	r2, [r3, #12]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8d7 	bl	80021ae <RTC_ReadTimeCounter>
 8002000:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <HAL_RTC_SetDate+0x160>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0adb      	lsrs	r3, r3, #11
 800200c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b18      	cmp	r3, #24
 8002012:	d93a      	bls.n	800208a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a23      	ldr	r2, [pc, #140]	@ (80020a4 <HAL_RTC_SetDate+0x164>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	4a22      	ldr	r2, [pc, #136]	@ (80020a8 <HAL_RTC_SetDate+0x168>)
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800202a:	69f9      	ldr	r1, [r7, #28]
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f8ee 	bl	800220e <RTC_WriteTimeCounter>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2204      	movs	r2, #4
 800203c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e027      	b.n	8002098 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f907 	bl	800225c <RTC_ReadAlarmCounter>
 800204e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d018      	beq.n	800208a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	d214      	bcs.n	800208a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002066:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800206a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f90d 	bl	800228e <RTC_WriteAlarmCounter>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2204      	movs	r2, #4
 800207e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e006      	b.n	8002098 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	91a2b3c5 	.word	0x91a2b3c5
 80020a4:	aaaaaaab 	.word	0xaaaaaaab
 80020a8:	00015180 	.word	0x00015180

080020ac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2100      	movs	r1, #0
 80020be:	460a      	mov	r2, r1
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	460a      	mov	r2, r1
 80020c4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_RTC_GetDate+0x26>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e03a      	b.n	800214c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fe56 	bl	8001d90 <HAL_RTC_GetTime>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e02e      	b.n	800214c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	7b1a      	ldrb	r2, [r3, #12]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	7bda      	ldrb	r2, [r3, #15]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	7b5a      	ldrb	r2, [r3, #13]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	7b9a      	ldrb	r2, [r3, #14]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01a      	beq.n	800214a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	78db      	ldrb	r3, [r3, #3]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f92f 	bl	800237c <RTC_ByteToBcd2>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f926 	bl	800237c <RTC_ByteToBcd2>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	789b      	ldrb	r3, [r3, #2]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f91d 	bl	800237c <RTC_ByteToBcd2>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01d      	b.n	80021a6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800217a:	f7fe fccb 	bl	8000b14 <HAL_GetTick>
 800217e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002180:	e009      	b.n	8002196 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002182:	f7fe fcc7 	bl	8000b14 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002190:	d901      	bls.n	8002196 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e007      	b.n	80021a6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b087      	sub	sp, #28
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	827b      	strh	r3, [r7, #18]
 80021ba:	2300      	movs	r3, #0
 80021bc:	823b      	strh	r3, [r7, #16]
 80021be:	2300      	movs	r3, #0
 80021c0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80021de:	8a7a      	ldrh	r2, [r7, #18]
 80021e0:	8a3b      	ldrh	r3, [r7, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d008      	beq.n	80021f8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80021e6:	8a3b      	ldrh	r3, [r7, #16]
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e004      	b.n	8002202 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80021f8:	8a7b      	ldrh	r3, [r7, #18]
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002202:	697b      	ldr	r3, [r7, #20]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f85d 	bl	80022dc <RTC_EnterInitMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e011      	b.n	8002252 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	0c12      	lsrs	r2, r2, #16
 8002236:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b292      	uxth	r2, r2
 8002240:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f872 	bl	800232c <RTC_ExitInitMode>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	81fb      	strh	r3, [r7, #14]
 8002268:	2300      	movs	r3, #0
 800226a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	89bb      	ldrh	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f81d 	bl	80022dc <RTC_EnterInitMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e011      	b.n	80022d2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	0c12      	lsrs	r2, r2, #16
 80022b6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b292      	uxth	r2, r2
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f832 	bl	800232c <RTC_ExitInitMode>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80022e8:	f7fe fc14 	bl	8000b14 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80022ee:	e009      	b.n	8002304 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022f0:	f7fe fc10 	bl	8000b14 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fe:	d901      	bls.n	8002304 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e00f      	b.n	8002324 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0210 	orr.w	r2, r2, #16
 8002320:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0210 	bic.w	r2, r2, #16
 8002346:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002348:	f7fe fbe4 	bl	8000b14 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800234e:	e009      	b.n	8002364 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002350:	f7fe fbe0 	bl	8000b14 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235e:	d901      	bls.n	8002364 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e007      	b.n	8002374 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ee      	beq.n	8002350 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800238a:	e005      	b.n	8002398 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3b0a      	subs	r3, #10
 8002396:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b09      	cmp	r3, #9
 800239c:	d8f6      	bhi.n	800238c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b2db      	uxtb	r3, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7bdb      	ldrb	r3, [r3, #15]
 800240e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7b5b      	ldrb	r3, [r3, #13]
 8002414:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7b9b      	ldrb	r3, [r3, #14]
 800241a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	e06f      	b.n	8002502 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d011      	beq.n	800244c <RTC_DateUpdate+0x5c>
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d00e      	beq.n	800244c <RTC_DateUpdate+0x5c>
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d00b      	beq.n	800244c <RTC_DateUpdate+0x5c>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b07      	cmp	r3, #7
 8002438:	d008      	beq.n	800244c <RTC_DateUpdate+0x5c>
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d005      	beq.n	800244c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d002      	beq.n	800244c <RTC_DateUpdate+0x5c>
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b0c      	cmp	r3, #12
 800244a:	d117      	bne.n	800247c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b1e      	cmp	r3, #30
 8002450:	d803      	bhi.n	800245a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3301      	adds	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002458:	e050      	b.n	80024fc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d005      	beq.n	800246c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	3301      	adds	r3, #1
 8002464:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002466:	2301      	movs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800246a:	e047      	b.n	80024fc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800246c:	2301      	movs	r3, #1
 800246e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002470:	2301      	movs	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
          year++;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3301      	adds	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800247a:	e03f      	b.n	80024fc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b04      	cmp	r3, #4
 8002480:	d008      	beq.n	8002494 <RTC_DateUpdate+0xa4>
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d005      	beq.n	8002494 <RTC_DateUpdate+0xa4>
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b09      	cmp	r3, #9
 800248c:	d002      	beq.n	8002494 <RTC_DateUpdate+0xa4>
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b0b      	cmp	r3, #11
 8002492:	d10c      	bne.n	80024ae <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b1d      	cmp	r3, #29
 8002498:	d803      	bhi.n	80024a2 <RTC_DateUpdate+0xb2>
      {
        day++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80024a0:	e02c      	b.n	80024fc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	3301      	adds	r3, #1
 80024a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80024a8:	2301      	movs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80024ac:	e026      	b.n	80024fc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b1b      	cmp	r3, #27
 80024b8:	d803      	bhi.n	80024c2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e01c      	b.n	80024fc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b1c      	cmp	r3, #28
 80024c6:	d111      	bne.n	80024ec <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f839 	bl	8002544 <RTC_IsLeapYear>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e00d      	b.n	80024fc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3301      	adds	r3, #1
 80024e4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e007      	b.n	80024fc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b1d      	cmp	r3, #29
 80024f0:	d104      	bne.n	80024fc <RTC_DateUpdate+0x10c>
      {
        month++;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3301      	adds	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80024f8:	2301      	movs	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3301      	adds	r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d38b      	bcc.n	8002422 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4619      	mov	r1, r3
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f000 f83b 	bl	80025a8 <RTC_WeekDayNum>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	731a      	strb	r2, [r3, #12]
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	e01d      	b.n	800259a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4a10      	ldr	r2, [pc, #64]	@ (80025a4 <RTC_IsLeapYear+0x60>)
 8002562:	fba2 1203 	umull	r1, r2, r2, r3
 8002566:	0952      	lsrs	r2, r2, #5
 8002568:	2164      	movs	r1, #100	@ 0x64
 800256a:	fb01 f202 	mul.w	r2, r1, r2
 800256e:	1a9b      	subs	r3, r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <RTC_IsLeapYear+0x60>)
 800257e:	fba2 1203 	umull	r1, r2, r2, r3
 8002582:	09d2      	lsrs	r2, r2, #7
 8002584:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002598:	2300      	movs	r3, #0
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
 80025b4:	4613      	mov	r3, r2
 80025b6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80025c6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d82d      	bhi.n	800262a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <RTC_WeekDayNum+0xe4>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	085a      	lsrs	r2, r3, #1
 80025e2:	78bb      	ldrb	r3, [r7, #2]
 80025e4:	441a      	add	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	441a      	add	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	4926      	ldr	r1, [pc, #152]	@ (8002690 <RTC_WeekDayNum+0xe8>)
 80025f8:	fba1 1303 	umull	r1, r3, r1, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	1ad2      	subs	r2, r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3b01      	subs	r3, #1
 8002604:	4922      	ldr	r1, [pc, #136]	@ (8002690 <RTC_WeekDayNum+0xe8>)
 8002606:	fba1 1303 	umull	r1, r3, r1, r3
 800260a:	09db      	lsrs	r3, r3, #7
 800260c:	4413      	add	r3, r2
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <RTC_WeekDayNum+0xec>)
 8002612:	fba3 1302 	umull	r1, r3, r3, r2
 8002616:	1ad1      	subs	r1, r2, r3
 8002618:	0849      	lsrs	r1, r1, #1
 800261a:	440b      	add	r3, r1
 800261c:	0899      	lsrs	r1, r3, #2
 800261e:	460b      	mov	r3, r1
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a5b      	subs	r3, r3, r1
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e029      	b.n	800267e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	4a15      	ldr	r2, [pc, #84]	@ (800268c <RTC_WeekDayNum+0xe4>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	085a      	lsrs	r2, r3, #1
 800263e:	78bb      	ldrb	r3, [r7, #2]
 8002640:	441a      	add	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	441a      	add	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	441a      	add	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	4910      	ldr	r1, [pc, #64]	@ (8002690 <RTC_WeekDayNum+0xe8>)
 8002650:	fba1 1303 	umull	r1, r3, r1, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	1ad2      	subs	r2, r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	490d      	ldr	r1, [pc, #52]	@ (8002690 <RTC_WeekDayNum+0xe8>)
 800265c:	fba1 1303 	umull	r1, r3, r1, r3
 8002660:	09db      	lsrs	r3, r3, #7
 8002662:	4413      	add	r3, r2
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <RTC_WeekDayNum+0xec>)
 8002668:	fba3 1302 	umull	r1, r3, r3, r2
 800266c:	1ad1      	subs	r1, r2, r3
 800266e:	0849      	lsrs	r1, r1, #1
 8002670:	440b      	add	r3, r1
 8002672:	0899      	lsrs	r1, r3, #2
 8002674:	460b      	mov	r3, r1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a5b      	subs	r3, r3, r1
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	b2db      	uxtb	r3, r3
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	38e38e39 	.word	0x38e38e39
 8002690:	51eb851f 	.word	0x51eb851f
 8002694:	24924925 	.word	0x24924925

08002698 <siprintf>:
 8002698:	b40e      	push	{r1, r2, r3}
 800269a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800269e:	b510      	push	{r4, lr}
 80026a0:	2400      	movs	r4, #0
 80026a2:	b09d      	sub	sp, #116	@ 0x74
 80026a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80026a6:	9002      	str	r0, [sp, #8]
 80026a8:	9006      	str	r0, [sp, #24]
 80026aa:	9107      	str	r1, [sp, #28]
 80026ac:	9104      	str	r1, [sp, #16]
 80026ae:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <siprintf+0x3c>)
 80026b0:	4909      	ldr	r1, [pc, #36]	@ (80026d8 <siprintf+0x40>)
 80026b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b6:	9105      	str	r1, [sp, #20]
 80026b8:	6800      	ldr	r0, [r0, #0]
 80026ba:	a902      	add	r1, sp, #8
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80026c0:	f000 f992 	bl	80029e8 <_svfiprintf_r>
 80026c4:	9b02      	ldr	r3, [sp, #8]
 80026c6:	701c      	strb	r4, [r3, #0]
 80026c8:	b01d      	add	sp, #116	@ 0x74
 80026ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ce:	b003      	add	sp, #12
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	ffff0208 	.word	0xffff0208

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <__errno>:
 80026ec:	4b01      	ldr	r3, [pc, #4]	@ (80026f4 <__errno+0x8>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <__libc_init_array>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	2600      	movs	r6, #0
 80026fc:	4d0c      	ldr	r5, [pc, #48]	@ (8002730 <__libc_init_array+0x38>)
 80026fe:	4c0d      	ldr	r4, [pc, #52]	@ (8002734 <__libc_init_array+0x3c>)
 8002700:	1b64      	subs	r4, r4, r5
 8002702:	10a4      	asrs	r4, r4, #2
 8002704:	42a6      	cmp	r6, r4
 8002706:	d109      	bne.n	800271c <__libc_init_array+0x24>
 8002708:	f000 fc76 	bl	8002ff8 <_init>
 800270c:	2600      	movs	r6, #0
 800270e:	4d0a      	ldr	r5, [pc, #40]	@ (8002738 <__libc_init_array+0x40>)
 8002710:	4c0a      	ldr	r4, [pc, #40]	@ (800273c <__libc_init_array+0x44>)
 8002712:	1b64      	subs	r4, r4, r5
 8002714:	10a4      	asrs	r4, r4, #2
 8002716:	42a6      	cmp	r6, r4
 8002718:	d105      	bne.n	8002726 <__libc_init_array+0x2e>
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002720:	4798      	blx	r3
 8002722:	3601      	adds	r6, #1
 8002724:	e7ee      	b.n	8002704 <__libc_init_array+0xc>
 8002726:	f855 3b04 	ldr.w	r3, [r5], #4
 800272a:	4798      	blx	r3
 800272c:	3601      	adds	r6, #1
 800272e:	e7f2      	b.n	8002716 <__libc_init_array+0x1e>
 8002730:	080030ac 	.word	0x080030ac
 8002734:	080030ac 	.word	0x080030ac
 8002738:	080030ac 	.word	0x080030ac
 800273c:	080030b0 	.word	0x080030b0

08002740 <__retarget_lock_acquire_recursive>:
 8002740:	4770      	bx	lr

08002742 <__retarget_lock_release_recursive>:
 8002742:	4770      	bx	lr

08002744 <_free_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	4605      	mov	r5, r0
 8002748:	2900      	cmp	r1, #0
 800274a:	d040      	beq.n	80027ce <_free_r+0x8a>
 800274c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002750:	1f0c      	subs	r4, r1, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	bfb8      	it	lt
 8002756:	18e4      	addlt	r4, r4, r3
 8002758:	f000 f8de 	bl	8002918 <__malloc_lock>
 800275c:	4a1c      	ldr	r2, [pc, #112]	@ (80027d0 <_free_r+0x8c>)
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	b933      	cbnz	r3, 8002770 <_free_r+0x2c>
 8002762:	6063      	str	r3, [r4, #4]
 8002764:	6014      	str	r4, [r2, #0]
 8002766:	4628      	mov	r0, r5
 8002768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800276c:	f000 b8da 	b.w	8002924 <__malloc_unlock>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d908      	bls.n	8002786 <_free_r+0x42>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	1821      	adds	r1, r4, r0
 8002778:	428b      	cmp	r3, r1
 800277a:	bf01      	itttt	eq
 800277c:	6819      	ldreq	r1, [r3, #0]
 800277e:	685b      	ldreq	r3, [r3, #4]
 8002780:	1809      	addeq	r1, r1, r0
 8002782:	6021      	streq	r1, [r4, #0]
 8002784:	e7ed      	b.n	8002762 <_free_r+0x1e>
 8002786:	461a      	mov	r2, r3
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b10b      	cbz	r3, 8002790 <_free_r+0x4c>
 800278c:	42a3      	cmp	r3, r4
 800278e:	d9fa      	bls.n	8002786 <_free_r+0x42>
 8002790:	6811      	ldr	r1, [r2, #0]
 8002792:	1850      	adds	r0, r2, r1
 8002794:	42a0      	cmp	r0, r4
 8002796:	d10b      	bne.n	80027b0 <_free_r+0x6c>
 8002798:	6820      	ldr	r0, [r4, #0]
 800279a:	4401      	add	r1, r0
 800279c:	1850      	adds	r0, r2, r1
 800279e:	4283      	cmp	r3, r0
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	d1e0      	bne.n	8002766 <_free_r+0x22>
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4408      	add	r0, r1
 80027aa:	6010      	str	r0, [r2, #0]
 80027ac:	6053      	str	r3, [r2, #4]
 80027ae:	e7da      	b.n	8002766 <_free_r+0x22>
 80027b0:	d902      	bls.n	80027b8 <_free_r+0x74>
 80027b2:	230c      	movs	r3, #12
 80027b4:	602b      	str	r3, [r5, #0]
 80027b6:	e7d6      	b.n	8002766 <_free_r+0x22>
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	1821      	adds	r1, r4, r0
 80027bc:	428b      	cmp	r3, r1
 80027be:	bf01      	itttt	eq
 80027c0:	6819      	ldreq	r1, [r3, #0]
 80027c2:	685b      	ldreq	r3, [r3, #4]
 80027c4:	1809      	addeq	r1, r1, r0
 80027c6:	6021      	streq	r1, [r4, #0]
 80027c8:	6063      	str	r3, [r4, #4]
 80027ca:	6054      	str	r4, [r2, #4]
 80027cc:	e7cb      	b.n	8002766 <_free_r+0x22>
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	2000022c 	.word	0x2000022c

080027d4 <sbrk_aligned>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4e0f      	ldr	r6, [pc, #60]	@ (8002814 <sbrk_aligned+0x40>)
 80027d8:	460c      	mov	r4, r1
 80027da:	6831      	ldr	r1, [r6, #0]
 80027dc:	4605      	mov	r5, r0
 80027de:	b911      	cbnz	r1, 80027e6 <sbrk_aligned+0x12>
 80027e0:	f000 fba8 	bl	8002f34 <_sbrk_r>
 80027e4:	6030      	str	r0, [r6, #0]
 80027e6:	4621      	mov	r1, r4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f000 fba3 	bl	8002f34 <_sbrk_r>
 80027ee:	1c43      	adds	r3, r0, #1
 80027f0:	d103      	bne.n	80027fa <sbrk_aligned+0x26>
 80027f2:	f04f 34ff 	mov.w	r4, #4294967295
 80027f6:	4620      	mov	r0, r4
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	1cc4      	adds	r4, r0, #3
 80027fc:	f024 0403 	bic.w	r4, r4, #3
 8002800:	42a0      	cmp	r0, r4
 8002802:	d0f8      	beq.n	80027f6 <sbrk_aligned+0x22>
 8002804:	1a21      	subs	r1, r4, r0
 8002806:	4628      	mov	r0, r5
 8002808:	f000 fb94 	bl	8002f34 <_sbrk_r>
 800280c:	3001      	adds	r0, #1
 800280e:	d1f2      	bne.n	80027f6 <sbrk_aligned+0x22>
 8002810:	e7ef      	b.n	80027f2 <sbrk_aligned+0x1e>
 8002812:	bf00      	nop
 8002814:	20000228 	.word	0x20000228

08002818 <_malloc_r>:
 8002818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800281c:	1ccd      	adds	r5, r1, #3
 800281e:	f025 0503 	bic.w	r5, r5, #3
 8002822:	3508      	adds	r5, #8
 8002824:	2d0c      	cmp	r5, #12
 8002826:	bf38      	it	cc
 8002828:	250c      	movcc	r5, #12
 800282a:	2d00      	cmp	r5, #0
 800282c:	4606      	mov	r6, r0
 800282e:	db01      	blt.n	8002834 <_malloc_r+0x1c>
 8002830:	42a9      	cmp	r1, r5
 8002832:	d904      	bls.n	800283e <_malloc_r+0x26>
 8002834:	230c      	movs	r3, #12
 8002836:	6033      	str	r3, [r6, #0]
 8002838:	2000      	movs	r0, #0
 800283a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800283e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002914 <_malloc_r+0xfc>
 8002842:	f000 f869 	bl	8002918 <__malloc_lock>
 8002846:	f8d8 3000 	ldr.w	r3, [r8]
 800284a:	461c      	mov	r4, r3
 800284c:	bb44      	cbnz	r4, 80028a0 <_malloc_r+0x88>
 800284e:	4629      	mov	r1, r5
 8002850:	4630      	mov	r0, r6
 8002852:	f7ff ffbf 	bl	80027d4 <sbrk_aligned>
 8002856:	1c43      	adds	r3, r0, #1
 8002858:	4604      	mov	r4, r0
 800285a:	d158      	bne.n	800290e <_malloc_r+0xf6>
 800285c:	f8d8 4000 	ldr.w	r4, [r8]
 8002860:	4627      	mov	r7, r4
 8002862:	2f00      	cmp	r7, #0
 8002864:	d143      	bne.n	80028ee <_malloc_r+0xd6>
 8002866:	2c00      	cmp	r4, #0
 8002868:	d04b      	beq.n	8002902 <_malloc_r+0xea>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	4639      	mov	r1, r7
 800286e:	4630      	mov	r0, r6
 8002870:	eb04 0903 	add.w	r9, r4, r3
 8002874:	f000 fb5e 	bl	8002f34 <_sbrk_r>
 8002878:	4581      	cmp	r9, r0
 800287a:	d142      	bne.n	8002902 <_malloc_r+0xea>
 800287c:	6821      	ldr	r1, [r4, #0]
 800287e:	4630      	mov	r0, r6
 8002880:	1a6d      	subs	r5, r5, r1
 8002882:	4629      	mov	r1, r5
 8002884:	f7ff ffa6 	bl	80027d4 <sbrk_aligned>
 8002888:	3001      	adds	r0, #1
 800288a:	d03a      	beq.n	8002902 <_malloc_r+0xea>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	442b      	add	r3, r5
 8002890:	6023      	str	r3, [r4, #0]
 8002892:	f8d8 3000 	ldr.w	r3, [r8]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	bb62      	cbnz	r2, 80028f4 <_malloc_r+0xdc>
 800289a:	f8c8 7000 	str.w	r7, [r8]
 800289e:	e00f      	b.n	80028c0 <_malloc_r+0xa8>
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	1b52      	subs	r2, r2, r5
 80028a4:	d420      	bmi.n	80028e8 <_malloc_r+0xd0>
 80028a6:	2a0b      	cmp	r2, #11
 80028a8:	d917      	bls.n	80028da <_malloc_r+0xc2>
 80028aa:	1961      	adds	r1, r4, r5
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	6025      	str	r5, [r4, #0]
 80028b0:	bf18      	it	ne
 80028b2:	6059      	strne	r1, [r3, #4]
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	bf08      	it	eq
 80028b8:	f8c8 1000 	streq.w	r1, [r8]
 80028bc:	5162      	str	r2, [r4, r5]
 80028be:	604b      	str	r3, [r1, #4]
 80028c0:	4630      	mov	r0, r6
 80028c2:	f000 f82f 	bl	8002924 <__malloc_unlock>
 80028c6:	f104 000b 	add.w	r0, r4, #11
 80028ca:	1d23      	adds	r3, r4, #4
 80028cc:	f020 0007 	bic.w	r0, r0, #7
 80028d0:	1ac2      	subs	r2, r0, r3
 80028d2:	bf1c      	itt	ne
 80028d4:	1a1b      	subne	r3, r3, r0
 80028d6:	50a3      	strne	r3, [r4, r2]
 80028d8:	e7af      	b.n	800283a <_malloc_r+0x22>
 80028da:	6862      	ldr	r2, [r4, #4]
 80028dc:	42a3      	cmp	r3, r4
 80028de:	bf0c      	ite	eq
 80028e0:	f8c8 2000 	streq.w	r2, [r8]
 80028e4:	605a      	strne	r2, [r3, #4]
 80028e6:	e7eb      	b.n	80028c0 <_malloc_r+0xa8>
 80028e8:	4623      	mov	r3, r4
 80028ea:	6864      	ldr	r4, [r4, #4]
 80028ec:	e7ae      	b.n	800284c <_malloc_r+0x34>
 80028ee:	463c      	mov	r4, r7
 80028f0:	687f      	ldr	r7, [r7, #4]
 80028f2:	e7b6      	b.n	8002862 <_malloc_r+0x4a>
 80028f4:	461a      	mov	r2, r3
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	42a3      	cmp	r3, r4
 80028fa:	d1fb      	bne.n	80028f4 <_malloc_r+0xdc>
 80028fc:	2300      	movs	r3, #0
 80028fe:	6053      	str	r3, [r2, #4]
 8002900:	e7de      	b.n	80028c0 <_malloc_r+0xa8>
 8002902:	230c      	movs	r3, #12
 8002904:	4630      	mov	r0, r6
 8002906:	6033      	str	r3, [r6, #0]
 8002908:	f000 f80c 	bl	8002924 <__malloc_unlock>
 800290c:	e794      	b.n	8002838 <_malloc_r+0x20>
 800290e:	6005      	str	r5, [r0, #0]
 8002910:	e7d6      	b.n	80028c0 <_malloc_r+0xa8>
 8002912:	bf00      	nop
 8002914:	2000022c 	.word	0x2000022c

08002918 <__malloc_lock>:
 8002918:	4801      	ldr	r0, [pc, #4]	@ (8002920 <__malloc_lock+0x8>)
 800291a:	f7ff bf11 	b.w	8002740 <__retarget_lock_acquire_recursive>
 800291e:	bf00      	nop
 8002920:	20000224 	.word	0x20000224

08002924 <__malloc_unlock>:
 8002924:	4801      	ldr	r0, [pc, #4]	@ (800292c <__malloc_unlock+0x8>)
 8002926:	f7ff bf0c 	b.w	8002742 <__retarget_lock_release_recursive>
 800292a:	bf00      	nop
 800292c:	20000224 	.word	0x20000224

08002930 <__ssputs_r>:
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	461f      	mov	r7, r3
 8002936:	688e      	ldr	r6, [r1, #8]
 8002938:	4682      	mov	sl, r0
 800293a:	42be      	cmp	r6, r7
 800293c:	460c      	mov	r4, r1
 800293e:	4690      	mov	r8, r2
 8002940:	680b      	ldr	r3, [r1, #0]
 8002942:	d82d      	bhi.n	80029a0 <__ssputs_r+0x70>
 8002944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002948:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800294c:	d026      	beq.n	800299c <__ssputs_r+0x6c>
 800294e:	6965      	ldr	r5, [r4, #20]
 8002950:	6909      	ldr	r1, [r1, #16]
 8002952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002956:	eba3 0901 	sub.w	r9, r3, r1
 800295a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800295e:	1c7b      	adds	r3, r7, #1
 8002960:	444b      	add	r3, r9
 8002962:	106d      	asrs	r5, r5, #1
 8002964:	429d      	cmp	r5, r3
 8002966:	bf38      	it	cc
 8002968:	461d      	movcc	r5, r3
 800296a:	0553      	lsls	r3, r2, #21
 800296c:	d527      	bpl.n	80029be <__ssputs_r+0x8e>
 800296e:	4629      	mov	r1, r5
 8002970:	f7ff ff52 	bl	8002818 <_malloc_r>
 8002974:	4606      	mov	r6, r0
 8002976:	b360      	cbz	r0, 80029d2 <__ssputs_r+0xa2>
 8002978:	464a      	mov	r2, r9
 800297a:	6921      	ldr	r1, [r4, #16]
 800297c:	f000 faf8 	bl	8002f70 <memcpy>
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800298a:	81a3      	strh	r3, [r4, #12]
 800298c:	6126      	str	r6, [r4, #16]
 800298e:	444e      	add	r6, r9
 8002990:	6026      	str	r6, [r4, #0]
 8002992:	463e      	mov	r6, r7
 8002994:	6165      	str	r5, [r4, #20]
 8002996:	eba5 0509 	sub.w	r5, r5, r9
 800299a:	60a5      	str	r5, [r4, #8]
 800299c:	42be      	cmp	r6, r7
 800299e:	d900      	bls.n	80029a2 <__ssputs_r+0x72>
 80029a0:	463e      	mov	r6, r7
 80029a2:	4632      	mov	r2, r6
 80029a4:	4641      	mov	r1, r8
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	f000 faaa 	bl	8002f00 <memmove>
 80029ac:	2000      	movs	r0, #0
 80029ae:	68a3      	ldr	r3, [r4, #8]
 80029b0:	1b9b      	subs	r3, r3, r6
 80029b2:	60a3      	str	r3, [r4, #8]
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	4433      	add	r3, r6
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029be:	462a      	mov	r2, r5
 80029c0:	f000 fae4 	bl	8002f8c <_realloc_r>
 80029c4:	4606      	mov	r6, r0
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d1e0      	bne.n	800298c <__ssputs_r+0x5c>
 80029ca:	4650      	mov	r0, sl
 80029cc:	6921      	ldr	r1, [r4, #16]
 80029ce:	f7ff feb9 	bl	8002744 <_free_r>
 80029d2:	230c      	movs	r3, #12
 80029d4:	f8ca 3000 	str.w	r3, [sl]
 80029d8:	89a3      	ldrh	r3, [r4, #12]
 80029da:	f04f 30ff 	mov.w	r0, #4294967295
 80029de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029e2:	81a3      	strh	r3, [r4, #12]
 80029e4:	e7e9      	b.n	80029ba <__ssputs_r+0x8a>
	...

080029e8 <_svfiprintf_r>:
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	4698      	mov	r8, r3
 80029ee:	898b      	ldrh	r3, [r1, #12]
 80029f0:	4607      	mov	r7, r0
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	460d      	mov	r5, r1
 80029f6:	4614      	mov	r4, r2
 80029f8:	b09d      	sub	sp, #116	@ 0x74
 80029fa:	d510      	bpl.n	8002a1e <_svfiprintf_r+0x36>
 80029fc:	690b      	ldr	r3, [r1, #16]
 80029fe:	b973      	cbnz	r3, 8002a1e <_svfiprintf_r+0x36>
 8002a00:	2140      	movs	r1, #64	@ 0x40
 8002a02:	f7ff ff09 	bl	8002818 <_malloc_r>
 8002a06:	6028      	str	r0, [r5, #0]
 8002a08:	6128      	str	r0, [r5, #16]
 8002a0a:	b930      	cbnz	r0, 8002a1a <_svfiprintf_r+0x32>
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	b01d      	add	sp, #116	@ 0x74
 8002a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1a:	2340      	movs	r3, #64	@ 0x40
 8002a1c:	616b      	str	r3, [r5, #20]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a22:	2320      	movs	r3, #32
 8002a24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a28:	2330      	movs	r3, #48	@ 0x30
 8002a2a:	f04f 0901 	mov.w	r9, #1
 8002a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002bcc <_svfiprintf_r+0x1e4>
 8002a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	469a      	mov	sl, r3
 8002a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a42:	b10a      	cbz	r2, 8002a48 <_svfiprintf_r+0x60>
 8002a44:	2a25      	cmp	r2, #37	@ 0x25
 8002a46:	d1f9      	bne.n	8002a3c <_svfiprintf_r+0x54>
 8002a48:	ebba 0b04 	subs.w	fp, sl, r4
 8002a4c:	d00b      	beq.n	8002a66 <_svfiprintf_r+0x7e>
 8002a4e:	465b      	mov	r3, fp
 8002a50:	4622      	mov	r2, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	4638      	mov	r0, r7
 8002a56:	f7ff ff6b 	bl	8002930 <__ssputs_r>
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	f000 80a7 	beq.w	8002bae <_svfiprintf_r+0x1c6>
 8002a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a62:	445a      	add	r2, fp
 8002a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a66:	f89a 3000 	ldrb.w	r3, [sl]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 809f 	beq.w	8002bae <_svfiprintf_r+0x1c6>
 8002a70:	2300      	movs	r3, #0
 8002a72:	f04f 32ff 	mov.w	r2, #4294967295
 8002a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a7a:	f10a 0a01 	add.w	sl, sl, #1
 8002a7e:	9304      	str	r3, [sp, #16]
 8002a80:	9307      	str	r3, [sp, #28]
 8002a82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a88:	4654      	mov	r4, sl
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a90:	484e      	ldr	r0, [pc, #312]	@ (8002bcc <_svfiprintf_r+0x1e4>)
 8002a92:	f000 fa5f 	bl	8002f54 <memchr>
 8002a96:	9a04      	ldr	r2, [sp, #16]
 8002a98:	b9d8      	cbnz	r0, 8002ad2 <_svfiprintf_r+0xea>
 8002a9a:	06d0      	lsls	r0, r2, #27
 8002a9c:	bf44      	itt	mi
 8002a9e:	2320      	movmi	r3, #32
 8002aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aa4:	0711      	lsls	r1, r2, #28
 8002aa6:	bf44      	itt	mi
 8002aa8:	232b      	movmi	r3, #43	@ 0x2b
 8002aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aae:	f89a 3000 	ldrb.w	r3, [sl]
 8002ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ab4:	d015      	beq.n	8002ae2 <_svfiprintf_r+0xfa>
 8002ab6:	4654      	mov	r4, sl
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f04f 0c0a 	mov.w	ip, #10
 8002abe:	9a07      	ldr	r2, [sp, #28]
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ac6:	3b30      	subs	r3, #48	@ 0x30
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d94b      	bls.n	8002b64 <_svfiprintf_r+0x17c>
 8002acc:	b1b0      	cbz	r0, 8002afc <_svfiprintf_r+0x114>
 8002ace:	9207      	str	r2, [sp, #28]
 8002ad0:	e014      	b.n	8002afc <_svfiprintf_r+0x114>
 8002ad2:	eba0 0308 	sub.w	r3, r0, r8
 8002ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8002ada:	4313      	orrs	r3, r2
 8002adc:	46a2      	mov	sl, r4
 8002ade:	9304      	str	r3, [sp, #16]
 8002ae0:	e7d2      	b.n	8002a88 <_svfiprintf_r+0xa0>
 8002ae2:	9b03      	ldr	r3, [sp, #12]
 8002ae4:	1d19      	adds	r1, r3, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	9103      	str	r1, [sp, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfbb      	ittet	lt
 8002aee:	425b      	neglt	r3, r3
 8002af0:	f042 0202 	orrlt.w	r2, r2, #2
 8002af4:	9307      	strge	r3, [sp, #28]
 8002af6:	9307      	strlt	r3, [sp, #28]
 8002af8:	bfb8      	it	lt
 8002afa:	9204      	strlt	r2, [sp, #16]
 8002afc:	7823      	ldrb	r3, [r4, #0]
 8002afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b00:	d10a      	bne.n	8002b18 <_svfiprintf_r+0x130>
 8002b02:	7863      	ldrb	r3, [r4, #1]
 8002b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b06:	d132      	bne.n	8002b6e <_svfiprintf_r+0x186>
 8002b08:	9b03      	ldr	r3, [sp, #12]
 8002b0a:	3402      	adds	r4, #2
 8002b0c:	1d1a      	adds	r2, r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	9203      	str	r2, [sp, #12]
 8002b12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b16:	9305      	str	r3, [sp, #20]
 8002b18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002bd0 <_svfiprintf_r+0x1e8>
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4650      	mov	r0, sl
 8002b20:	7821      	ldrb	r1, [r4, #0]
 8002b22:	f000 fa17 	bl	8002f54 <memchr>
 8002b26:	b138      	cbz	r0, 8002b38 <_svfiprintf_r+0x150>
 8002b28:	2240      	movs	r2, #64	@ 0x40
 8002b2a:	9b04      	ldr	r3, [sp, #16]
 8002b2c:	eba0 000a 	sub.w	r0, r0, sl
 8002b30:	4082      	lsls	r2, r0
 8002b32:	4313      	orrs	r3, r2
 8002b34:	3401      	adds	r4, #1
 8002b36:	9304      	str	r3, [sp, #16]
 8002b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b3c:	2206      	movs	r2, #6
 8002b3e:	4825      	ldr	r0, [pc, #148]	@ (8002bd4 <_svfiprintf_r+0x1ec>)
 8002b40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b44:	f000 fa06 	bl	8002f54 <memchr>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d036      	beq.n	8002bba <_svfiprintf_r+0x1d2>
 8002b4c:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <_svfiprintf_r+0x1f0>)
 8002b4e:	bb1b      	cbnz	r3, 8002b98 <_svfiprintf_r+0x1b0>
 8002b50:	9b03      	ldr	r3, [sp, #12]
 8002b52:	3307      	adds	r3, #7
 8002b54:	f023 0307 	bic.w	r3, r3, #7
 8002b58:	3308      	adds	r3, #8
 8002b5a:	9303      	str	r3, [sp, #12]
 8002b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b5e:	4433      	add	r3, r6
 8002b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b62:	e76a      	b.n	8002a3a <_svfiprintf_r+0x52>
 8002b64:	460c      	mov	r4, r1
 8002b66:	2001      	movs	r0, #1
 8002b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b6c:	e7a8      	b.n	8002ac0 <_svfiprintf_r+0xd8>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f04f 0c0a 	mov.w	ip, #10
 8002b74:	4619      	mov	r1, r3
 8002b76:	3401      	adds	r4, #1
 8002b78:	9305      	str	r3, [sp, #20]
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b80:	3a30      	subs	r2, #48	@ 0x30
 8002b82:	2a09      	cmp	r2, #9
 8002b84:	d903      	bls.n	8002b8e <_svfiprintf_r+0x1a6>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0c6      	beq.n	8002b18 <_svfiprintf_r+0x130>
 8002b8a:	9105      	str	r1, [sp, #20]
 8002b8c:	e7c4      	b.n	8002b18 <_svfiprintf_r+0x130>
 8002b8e:	4604      	mov	r4, r0
 8002b90:	2301      	movs	r3, #1
 8002b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b96:	e7f0      	b.n	8002b7a <_svfiprintf_r+0x192>
 8002b98:	ab03      	add	r3, sp, #12
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	462a      	mov	r2, r5
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <_svfiprintf_r+0x1f4>)
 8002ba2:	a904      	add	r1, sp, #16
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	1c42      	adds	r2, r0, #1
 8002baa:	4606      	mov	r6, r0
 8002bac:	d1d6      	bne.n	8002b5c <_svfiprintf_r+0x174>
 8002bae:	89ab      	ldrh	r3, [r5, #12]
 8002bb0:	065b      	lsls	r3, r3, #25
 8002bb2:	f53f af2d 	bmi.w	8002a10 <_svfiprintf_r+0x28>
 8002bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bb8:	e72c      	b.n	8002a14 <_svfiprintf_r+0x2c>
 8002bba:	ab03      	add	r3, sp, #12
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	4638      	mov	r0, r7
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <_svfiprintf_r+0x1f4>)
 8002bc4:	a904      	add	r1, sp, #16
 8002bc6:	f000 f87d 	bl	8002cc4 <_printf_i>
 8002bca:	e7ed      	b.n	8002ba8 <_svfiprintf_r+0x1c0>
 8002bcc:	08003076 	.word	0x08003076
 8002bd0:	0800307c 	.word	0x0800307c
 8002bd4:	08003080 	.word	0x08003080
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	08002931 	.word	0x08002931

08002be0 <_printf_common>:
 8002be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be4:	4616      	mov	r6, r2
 8002be6:	4698      	mov	r8, r3
 8002be8:	688a      	ldr	r2, [r1, #8]
 8002bea:	690b      	ldr	r3, [r1, #16]
 8002bec:	4607      	mov	r7, r0
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	bfb8      	it	lt
 8002bf2:	4613      	movlt	r3, r2
 8002bf4:	6033      	str	r3, [r6, #0]
 8002bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c00:	b10a      	cbz	r2, 8002c06 <_printf_common+0x26>
 8002c02:	3301      	adds	r3, #1
 8002c04:	6033      	str	r3, [r6, #0]
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	0699      	lsls	r1, r3, #26
 8002c0a:	bf42      	ittt	mi
 8002c0c:	6833      	ldrmi	r3, [r6, #0]
 8002c0e:	3302      	addmi	r3, #2
 8002c10:	6033      	strmi	r3, [r6, #0]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	f015 0506 	ands.w	r5, r5, #6
 8002c18:	d106      	bne.n	8002c28 <_printf_common+0x48>
 8002c1a:	f104 0a19 	add.w	sl, r4, #25
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	6832      	ldr	r2, [r6, #0]
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	42ab      	cmp	r3, r5
 8002c26:	dc2b      	bgt.n	8002c80 <_printf_common+0xa0>
 8002c28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	3b00      	subs	r3, #0
 8002c30:	bf18      	it	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	0692      	lsls	r2, r2, #26
 8002c36:	d430      	bmi.n	8002c9a <_printf_common+0xba>
 8002c38:	4641      	mov	r1, r8
 8002c3a:	4638      	mov	r0, r7
 8002c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c40:	47c8      	blx	r9
 8002c42:	3001      	adds	r0, #1
 8002c44:	d023      	beq.n	8002c8e <_printf_common+0xae>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	6922      	ldr	r2, [r4, #16]
 8002c4a:	f003 0306 	and.w	r3, r3, #6
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf14      	ite	ne
 8002c52:	2500      	movne	r5, #0
 8002c54:	6833      	ldreq	r3, [r6, #0]
 8002c56:	f04f 0600 	mov.w	r6, #0
 8002c5a:	bf08      	it	eq
 8002c5c:	68e5      	ldreq	r5, [r4, #12]
 8002c5e:	f104 041a 	add.w	r4, r4, #26
 8002c62:	bf08      	it	eq
 8002c64:	1aed      	subeq	r5, r5, r3
 8002c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c6a:	bf08      	it	eq
 8002c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bfc4      	itt	gt
 8002c74:	1a9b      	subgt	r3, r3, r2
 8002c76:	18ed      	addgt	r5, r5, r3
 8002c78:	42b5      	cmp	r5, r6
 8002c7a:	d11a      	bne.n	8002cb2 <_printf_common+0xd2>
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	e008      	b.n	8002c92 <_printf_common+0xb2>
 8002c80:	2301      	movs	r3, #1
 8002c82:	4652      	mov	r2, sl
 8002c84:	4641      	mov	r1, r8
 8002c86:	4638      	mov	r0, r7
 8002c88:	47c8      	blx	r9
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d103      	bne.n	8002c96 <_printf_common+0xb6>
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c96:	3501      	adds	r5, #1
 8002c98:	e7c1      	b.n	8002c1e <_printf_common+0x3e>
 8002c9a:	2030      	movs	r0, #48	@ 0x30
 8002c9c:	18e1      	adds	r1, r4, r3
 8002c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ca8:	4422      	add	r2, r4
 8002caa:	3302      	adds	r3, #2
 8002cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cb0:	e7c2      	b.n	8002c38 <_printf_common+0x58>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	4638      	mov	r0, r7
 8002cba:	47c8      	blx	r9
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d0e6      	beq.n	8002c8e <_printf_common+0xae>
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7d9      	b.n	8002c78 <_printf_common+0x98>

08002cc4 <_printf_i>:
 8002cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	7e0f      	ldrb	r7, [r1, #24]
 8002cca:	4691      	mov	r9, r2
 8002ccc:	2f78      	cmp	r7, #120	@ 0x78
 8002cce:	4680      	mov	r8, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	469a      	mov	sl, r3
 8002cd4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cda:	d807      	bhi.n	8002cec <_printf_i+0x28>
 8002cdc:	2f62      	cmp	r7, #98	@ 0x62
 8002cde:	d80a      	bhi.n	8002cf6 <_printf_i+0x32>
 8002ce0:	2f00      	cmp	r7, #0
 8002ce2:	f000 80d1 	beq.w	8002e88 <_printf_i+0x1c4>
 8002ce6:	2f58      	cmp	r7, #88	@ 0x58
 8002ce8:	f000 80b8 	beq.w	8002e5c <_printf_i+0x198>
 8002cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002cf4:	e03a      	b.n	8002d6c <_printf_i+0xa8>
 8002cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cfa:	2b15      	cmp	r3, #21
 8002cfc:	d8f6      	bhi.n	8002cec <_printf_i+0x28>
 8002cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8002d04 <_printf_i+0x40>)
 8002d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d04:	08002d5d 	.word	0x08002d5d
 8002d08:	08002d71 	.word	0x08002d71
 8002d0c:	08002ced 	.word	0x08002ced
 8002d10:	08002ced 	.word	0x08002ced
 8002d14:	08002ced 	.word	0x08002ced
 8002d18:	08002ced 	.word	0x08002ced
 8002d1c:	08002d71 	.word	0x08002d71
 8002d20:	08002ced 	.word	0x08002ced
 8002d24:	08002ced 	.word	0x08002ced
 8002d28:	08002ced 	.word	0x08002ced
 8002d2c:	08002ced 	.word	0x08002ced
 8002d30:	08002e6f 	.word	0x08002e6f
 8002d34:	08002d9b 	.word	0x08002d9b
 8002d38:	08002e29 	.word	0x08002e29
 8002d3c:	08002ced 	.word	0x08002ced
 8002d40:	08002ced 	.word	0x08002ced
 8002d44:	08002e91 	.word	0x08002e91
 8002d48:	08002ced 	.word	0x08002ced
 8002d4c:	08002d9b 	.word	0x08002d9b
 8002d50:	08002ced 	.word	0x08002ced
 8002d54:	08002ced 	.word	0x08002ced
 8002d58:	08002e31 	.word	0x08002e31
 8002d5c:	6833      	ldr	r3, [r6, #0]
 8002d5e:	1d1a      	adds	r2, r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6032      	str	r2, [r6, #0]
 8002d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e09c      	b.n	8002eaa <_printf_i+0x1e6>
 8002d70:	6833      	ldr	r3, [r6, #0]
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	1d19      	adds	r1, r3, #4
 8002d76:	6031      	str	r1, [r6, #0]
 8002d78:	0606      	lsls	r6, r0, #24
 8002d7a:	d501      	bpl.n	8002d80 <_printf_i+0xbc>
 8002d7c:	681d      	ldr	r5, [r3, #0]
 8002d7e:	e003      	b.n	8002d88 <_printf_i+0xc4>
 8002d80:	0645      	lsls	r5, r0, #25
 8002d82:	d5fb      	bpl.n	8002d7c <_printf_i+0xb8>
 8002d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d88:	2d00      	cmp	r5, #0
 8002d8a:	da03      	bge.n	8002d94 <_printf_i+0xd0>
 8002d8c:	232d      	movs	r3, #45	@ 0x2d
 8002d8e:	426d      	negs	r5, r5
 8002d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d94:	230a      	movs	r3, #10
 8002d96:	4858      	ldr	r0, [pc, #352]	@ (8002ef8 <_printf_i+0x234>)
 8002d98:	e011      	b.n	8002dbe <_printf_i+0xfa>
 8002d9a:	6821      	ldr	r1, [r4, #0]
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	0608      	lsls	r0, r1, #24
 8002da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002da4:	d402      	bmi.n	8002dac <_printf_i+0xe8>
 8002da6:	0649      	lsls	r1, r1, #25
 8002da8:	bf48      	it	mi
 8002daa:	b2ad      	uxthmi	r5, r5
 8002dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dae:	6033      	str	r3, [r6, #0]
 8002db0:	bf14      	ite	ne
 8002db2:	230a      	movne	r3, #10
 8002db4:	2308      	moveq	r3, #8
 8002db6:	4850      	ldr	r0, [pc, #320]	@ (8002ef8 <_printf_i+0x234>)
 8002db8:	2100      	movs	r1, #0
 8002dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dbe:	6866      	ldr	r6, [r4, #4]
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	60a6      	str	r6, [r4, #8]
 8002dc4:	db05      	blt.n	8002dd2 <_printf_i+0x10e>
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	432e      	orrs	r6, r5
 8002dca:	f021 0104 	bic.w	r1, r1, #4
 8002dce:	6021      	str	r1, [r4, #0]
 8002dd0:	d04b      	beq.n	8002e6a <_printf_i+0x1a6>
 8002dd2:	4616      	mov	r6, r2
 8002dd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dd8:	fb03 5711 	mls	r7, r3, r1, r5
 8002ddc:	5dc7      	ldrb	r7, [r0, r7]
 8002dde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002de2:	462f      	mov	r7, r5
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	460d      	mov	r5, r1
 8002de8:	d9f4      	bls.n	8002dd4 <_printf_i+0x110>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d10b      	bne.n	8002e06 <_printf_i+0x142>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	07df      	lsls	r7, r3, #31
 8002df2:	d508      	bpl.n	8002e06 <_printf_i+0x142>
 8002df4:	6923      	ldr	r3, [r4, #16]
 8002df6:	6861      	ldr	r1, [r4, #4]
 8002df8:	4299      	cmp	r1, r3
 8002dfa:	bfde      	ittt	le
 8002dfc:	2330      	movle	r3, #48	@ 0x30
 8002dfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e06:	1b92      	subs	r2, r2, r6
 8002e08:	6122      	str	r2, [r4, #16]
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f8cd a000 	str.w	sl, [sp]
 8002e14:	aa03      	add	r2, sp, #12
 8002e16:	f7ff fee3 	bl	8002be0 <_printf_common>
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d14a      	bne.n	8002eb4 <_printf_i+0x1f0>
 8002e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e22:	b004      	add	sp, #16
 8002e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	f043 0320 	orr.w	r3, r3, #32
 8002e2e:	6023      	str	r3, [r4, #0]
 8002e30:	2778      	movs	r7, #120	@ 0x78
 8002e32:	4832      	ldr	r0, [pc, #200]	@ (8002efc <_printf_i+0x238>)
 8002e34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	6831      	ldr	r1, [r6, #0]
 8002e3c:	061f      	lsls	r7, r3, #24
 8002e3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e42:	d402      	bmi.n	8002e4a <_printf_i+0x186>
 8002e44:	065f      	lsls	r7, r3, #25
 8002e46:	bf48      	it	mi
 8002e48:	b2ad      	uxthmi	r5, r5
 8002e4a:	6031      	str	r1, [r6, #0]
 8002e4c:	07d9      	lsls	r1, r3, #31
 8002e4e:	bf44      	itt	mi
 8002e50:	f043 0320 	orrmi.w	r3, r3, #32
 8002e54:	6023      	strmi	r3, [r4, #0]
 8002e56:	b11d      	cbz	r5, 8002e60 <_printf_i+0x19c>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	e7ad      	b.n	8002db8 <_printf_i+0xf4>
 8002e5c:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <_printf_i+0x234>)
 8002e5e:	e7e9      	b.n	8002e34 <_printf_i+0x170>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	f023 0320 	bic.w	r3, r3, #32
 8002e66:	6023      	str	r3, [r4, #0]
 8002e68:	e7f6      	b.n	8002e58 <_printf_i+0x194>
 8002e6a:	4616      	mov	r6, r2
 8002e6c:	e7bd      	b.n	8002dea <_printf_i+0x126>
 8002e6e:	6833      	ldr	r3, [r6, #0]
 8002e70:	6825      	ldr	r5, [r4, #0]
 8002e72:	1d18      	adds	r0, r3, #4
 8002e74:	6961      	ldr	r1, [r4, #20]
 8002e76:	6030      	str	r0, [r6, #0]
 8002e78:	062e      	lsls	r6, r5, #24
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	d501      	bpl.n	8002e82 <_printf_i+0x1be>
 8002e7e:	6019      	str	r1, [r3, #0]
 8002e80:	e002      	b.n	8002e88 <_printf_i+0x1c4>
 8002e82:	0668      	lsls	r0, r5, #25
 8002e84:	d5fb      	bpl.n	8002e7e <_printf_i+0x1ba>
 8002e86:	8019      	strh	r1, [r3, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4616      	mov	r6, r2
 8002e8c:	6123      	str	r3, [r4, #16]
 8002e8e:	e7bc      	b.n	8002e0a <_printf_i+0x146>
 8002e90:	6833      	ldr	r3, [r6, #0]
 8002e92:	2100      	movs	r1, #0
 8002e94:	1d1a      	adds	r2, r3, #4
 8002e96:	6032      	str	r2, [r6, #0]
 8002e98:	681e      	ldr	r6, [r3, #0]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f859 	bl	8002f54 <memchr>
 8002ea2:	b108      	cbz	r0, 8002ea8 <_printf_i+0x1e4>
 8002ea4:	1b80      	subs	r0, r0, r6
 8002ea6:	6060      	str	r0, [r4, #4]
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	6123      	str	r3, [r4, #16]
 8002eac:	2300      	movs	r3, #0
 8002eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eb2:	e7aa      	b.n	8002e0a <_printf_i+0x146>
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4640      	mov	r0, r8
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	47d0      	blx	sl
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0ad      	beq.n	8002e1e <_printf_i+0x15a>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	079b      	lsls	r3, r3, #30
 8002ec6:	d413      	bmi.n	8002ef0 <_printf_i+0x22c>
 8002ec8:	68e0      	ldr	r0, [r4, #12]
 8002eca:	9b03      	ldr	r3, [sp, #12]
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	bfb8      	it	lt
 8002ed0:	4618      	movlt	r0, r3
 8002ed2:	e7a6      	b.n	8002e22 <_printf_i+0x15e>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4640      	mov	r0, r8
 8002edc:	47d0      	blx	sl
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d09d      	beq.n	8002e1e <_printf_i+0x15a>
 8002ee2:	3501      	adds	r5, #1
 8002ee4:	68e3      	ldr	r3, [r4, #12]
 8002ee6:	9903      	ldr	r1, [sp, #12]
 8002ee8:	1a5b      	subs	r3, r3, r1
 8002eea:	42ab      	cmp	r3, r5
 8002eec:	dcf2      	bgt.n	8002ed4 <_printf_i+0x210>
 8002eee:	e7eb      	b.n	8002ec8 <_printf_i+0x204>
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	f104 0619 	add.w	r6, r4, #25
 8002ef6:	e7f5      	b.n	8002ee4 <_printf_i+0x220>
 8002ef8:	08003087 	.word	0x08003087
 8002efc:	08003098 	.word	0x08003098

08002f00 <memmove>:
 8002f00:	4288      	cmp	r0, r1
 8002f02:	b510      	push	{r4, lr}
 8002f04:	eb01 0402 	add.w	r4, r1, r2
 8002f08:	d902      	bls.n	8002f10 <memmove+0x10>
 8002f0a:	4284      	cmp	r4, r0
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	d807      	bhi.n	8002f20 <memmove+0x20>
 8002f10:	1e43      	subs	r3, r0, #1
 8002f12:	42a1      	cmp	r1, r4
 8002f14:	d008      	beq.n	8002f28 <memmove+0x28>
 8002f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f1e:	e7f8      	b.n	8002f12 <memmove+0x12>
 8002f20:	4601      	mov	r1, r0
 8002f22:	4402      	add	r2, r0
 8002f24:	428a      	cmp	r2, r1
 8002f26:	d100      	bne.n	8002f2a <memmove+0x2a>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f32:	e7f7      	b.n	8002f24 <memmove+0x24>

08002f34 <_sbrk_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	2300      	movs	r3, #0
 8002f38:	4d05      	ldr	r5, [pc, #20]	@ (8002f50 <_sbrk_r+0x1c>)
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fd2e 	bl	80009a0 <_sbrk>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_sbrk_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_sbrk_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	20000220 	.word	0x20000220

08002f54 <memchr>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	b510      	push	{r4, lr}
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	4402      	add	r2, r0
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	d101      	bne.n	8002f66 <memchr+0x12>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e003      	b.n	8002f6e <memchr+0x1a>
 8002f66:	7804      	ldrb	r4, [r0, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	428c      	cmp	r4, r1
 8002f6c:	d1f6      	bne.n	8002f5c <memchr+0x8>
 8002f6e:	bd10      	pop	{r4, pc}

08002f70 <memcpy>:
 8002f70:	440a      	add	r2, r1
 8002f72:	4291      	cmp	r1, r2
 8002f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f78:	d100      	bne.n	8002f7c <memcpy+0xc>
 8002f7a:	4770      	bx	lr
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f82:	4291      	cmp	r1, r2
 8002f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f88:	d1f9      	bne.n	8002f7e <memcpy+0xe>
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <_realloc_r>:
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	4607      	mov	r7, r0
 8002f92:	4614      	mov	r4, r2
 8002f94:	460d      	mov	r5, r1
 8002f96:	b921      	cbnz	r1, 8002fa2 <_realloc_r+0x16>
 8002f98:	4611      	mov	r1, r2
 8002f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9e:	f7ff bc3b 	b.w	8002818 <_malloc_r>
 8002fa2:	b92a      	cbnz	r2, 8002fb0 <_realloc_r+0x24>
 8002fa4:	f7ff fbce 	bl	8002744 <_free_r>
 8002fa8:	4625      	mov	r5, r4
 8002faa:	4628      	mov	r0, r5
 8002fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb0:	f000 f81a 	bl	8002fe8 <_malloc_usable_size_r>
 8002fb4:	4284      	cmp	r4, r0
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	d802      	bhi.n	8002fc0 <_realloc_r+0x34>
 8002fba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fbe:	d8f4      	bhi.n	8002faa <_realloc_r+0x1e>
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f7ff fc28 	bl	8002818 <_malloc_r>
 8002fc8:	4680      	mov	r8, r0
 8002fca:	b908      	cbnz	r0, 8002fd0 <_realloc_r+0x44>
 8002fcc:	4645      	mov	r5, r8
 8002fce:	e7ec      	b.n	8002faa <_realloc_r+0x1e>
 8002fd0:	42b4      	cmp	r4, r6
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	bf28      	it	cs
 8002fd8:	4632      	movcs	r2, r6
 8002fda:	f7ff ffc9 	bl	8002f70 <memcpy>
 8002fde:	4629      	mov	r1, r5
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	f7ff fbaf 	bl	8002744 <_free_r>
 8002fe6:	e7f1      	b.n	8002fcc <_realloc_r+0x40>

08002fe8 <_malloc_usable_size_r>:
 8002fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fec:	1f18      	subs	r0, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bfbc      	itt	lt
 8002ff2:	580b      	ldrlt	r3, [r1, r0]
 8002ff4:	18c0      	addlt	r0, r0, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
